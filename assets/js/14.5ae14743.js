(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{444:function(s,t,a){s.exports=a.p+"assets/img/01.5e6a34ec.jpg"},485:function(s,t,a){"use strict";a.r(t);var n=a(27),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,n=s._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h1",{attrs:{id:"拷贝构造函数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#拷贝构造函数"}},[s._v("#")]),s._v(" 拷贝构造函数")]),s._v(" "),n("h2",{attrs:{id:"写在前面"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#写在前面"}},[s._v("#")]),s._v(" 写在前面")]),s._v(" "),n("p",[s._v("C++ 的参数传递方式：")]),s._v(" "),n("ul",[n("li",[s._v("与其它编程语言一样，C++ 的参数传递一般有几种方式：引用传递、按值传递；")]),s._v(" "),n("li",[s._v("其中，引用传递是比较明确的，就是 "),n("code",[s._v("&")]),s._v(" 引用的传递；")]),s._v(" "),n("li",[s._v("但是，按值传递场景就比较多，例如：变量可以直接按值传递，指针值也是按值传递（因为指针本身其实就是一个 "),n("code",[s._v("int")]),s._v(" 变量）；")]),s._v(" "),n("li",[s._v("而麻烦在于："),n("em",[n("strong",[s._v("C++的对象也可以按值传递")])]),s._v(" ，这就是本文要讲解的内容。")])]),s._v(" "),n("blockquote",[n("p",[s._v("对于 JAVA 、.NET 来说，对象都是引用传递的，可 C++ 没有这么办，所以，C++ 对象的按值传递就带来了一系列麻烦，语法和规则也变得很麻烦，对应的，编译器为了处理这些麻烦也很辛苦（同情C++编译器）。当然，我们也可以认为，正是看到 C++ 允许对象的按值传递所带来的一系列晦涩和麻烦，后期的 JAVA/.NET 才干脆而直白的取消了该规则，对象一律按照引用传递。")])]),s._v(" "),n("p",[n("em",[s._v("当然，其实C++对象的按值传递也没那么复杂，规则搞清楚了自然也就豁然开朗。为了豁然开朗，需要后续一步一步的来讲解。")])]),s._v(" "),n("h2",{attrs:{id:"对象的生成步骤"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#对象的生成步骤"}},[s._v("#")]),s._v(" 对象的生成步骤")]),s._v(" "),n("p",[s._v("我们知道，一个对象的生成，需要两个步骤：")]),s._v(" "),n("ol",[n("li",[s._v("分配对象的空间，空间包括对象所属类的成员变量，且空间可能在堆上，可能在栈上，取决于分配的语法；")]),s._v(" "),n("li",[s._v("针对该对象空间执行对应的构造函数；")])]),s._v(" "),n("p",[s._v("因此，如下代码展示了上述两个步骤：")]),s._v(" "),n("div",{staticClass:"language-cpp line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-cpp"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Test")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("Test")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" p"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" mp "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//t1对象在栈上")]),s._v("\nTest "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("t1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//t2对象在堆上")]),s._v("\nTest"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" t2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("Test")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br")])]),n("p",[s._v("根据上述代码，在生成一个对象时，步骤如下：")]),s._v(" "),n("ol",[n("li",[s._v("分配对象空间，大小由 "),n("code",[s._v("Test")]),s._v(" 类里的成员变量决定；")]),s._v(" "),n("li",[s._v("为对象空间里的成员变量赋值为初始值，例如 "),n("code",[s._v("mp")]),s._v(" 赋值为 8 ；")]),s._v(" "),n("li",[s._v("基于对象空间，执行构造函数 "),n("code",[s._v("Test(int)")]),s._v(" ；")])]),s._v(" "),n("h2",{attrs:{id:"拷贝构造函数的产生"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#拷贝构造函数的产生"}},[s._v("#")]),s._v(" 拷贝构造函数的产生")]),s._v(" "),n("p",[s._v("基于前面的内容，现在考虑一种情况：构造函数的参数是对应类型的对象，即：")]),s._v(" "),n("div",{staticClass:"language-cpp line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-cpp"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Test")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("Test")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("Test"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v(" pt"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[s._v("问题就是结论：")]),s._v(" "),n("ul",[n("li",[s._v("所谓拷贝构造函数，就是 "),n("em",[n("strong",[s._v("构造器的参数是对应类型的对象")])]),s._v(" ；")]),s._v(" "),n("li",[s._v("但实际情况没这么简单，还有很多限制，也有很多种情况，后续会逐步说明；")])]),s._v(" "),n("p",[s._v("该部分内容主要讲 「拷贝构造函数的产生」，因此，看哪些情况下会使用到拷贝构造函数：")]),s._v(" "),n("ol",[n("li",[s._v("将对象作为函数的参数，例如 "),n("code",[s._v("void f(Test pt)")])]),s._v(" "),n("li",[s._v("将对象作为函数的返回值，例如 "),n("code",[s._v("Test f()")])]),s._v(" "),n("li",[s._v("将对象直接赋值给另一个对象，例如 "),n("code",[s._v("Test t2=t1")])])]),s._v(" "),n("p",[s._v("上述就是可能导致拷贝构造函数被触发的所有情况。为了理解拷贝构造函数，还需提前说明几点：")]),s._v(" "),n("ol",[n("li",[s._v("将对象作为函数的参数，此处包括 "),n("em",[n("strong",[s._v("构造函数、以及构造函数之外的函数")])])]),s._v(" "),n("li",[s._v("拷贝构造函数只发生于将 "),n("em",[n("strong",[s._v("对象按值传递")])]),s._v(" 的时候")])]),s._v(" "),n("p",[s._v("所以，下面几种情况都不会触发拷贝构造函数：")]),s._v(" "),n("ul",[n("li",[n("code",[s._v("void f(Test& pt)")]),s._v(" ，此时对象不是按值传递，不会触发拷贝构造函数；")]),s._v(" "),n("li",[n("code",[s._v("Test& f() { return Test(); }")]),s._v(" ，此时返回的是对象的引用，不会触发拷贝构造函数；")])]),s._v(" "),n("p",[s._v("结合前面所讲的对象的生成步骤，总结一下拷贝构造函数被触发时的行为：")]),s._v(" "),n("ol",[n("li",[s._v("分配对象空间，大小由对应类里的成员变量决定；")]),s._v(" "),n("li",[s._v("为对象空间里的成员变量赋值为初始值；")]),s._v(" "),n("li",[s._v("基于对象空间，执行拷贝构造函数；")])]),s._v(" "),n("h2",{attrs:{id:"浅拷贝-深拷贝"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#浅拷贝-深拷贝"}},[s._v("#")]),s._v(" 浅拷贝 & 深拷贝")]),s._v(" "),n("p",[n("em",[s._v("这部分内容依然是铺垫。")])]),s._v(" "),n("p",[n("em",[n("strong",[s._v("浅拷贝")])]),s._v(" ：")]),s._v(" "),n("ul",[n("li",[s._v("就是将对象的空间按字节位进行拷贝")]),s._v(" "),n("li",[s._v("此时，假设对象中的某个成员变量是一个指针，则浅拷贝后，两个指针值是一样的，都指向同一个地址")])]),s._v(" "),n("p",[n("em",[n("strong",[s._v("深拷贝")])]),s._v(" ：")]),s._v(" "),n("ul",[n("li",[s._v("就是自行处理对象空间中各个成员变量的内容")]),s._v(" "),n("li",[s._v("例如，分配新的内存空间并让成员变量指针指向新地址，并为分配的新内存赋值等")])]),s._v(" "),n("p",[s._v("浅拷贝和深拷贝的示意图如下：")]),s._v(" "),n("p",[n("img",{attrs:{src:a(444),alt:"pic"}})]),s._v(" "),n("p",[s._v("需要说明的是：")]),s._v(" "),n("ul",[n("li",[s._v("浅拷贝和深拷贝并无所谓好和坏，取决于具体的程序需求")]),s._v(" "),n("li",[s._v("只要程序员清楚二者的区别，并确保拷贝后的新对象空间的值是自己预期的即可")])]),s._v(" "),n("h2",{attrs:{id:"拷贝构造函数的原型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#拷贝构造函数的原型"}},[s._v("#")]),s._v(" 拷贝构造函数的原型")]),s._v(" "),n("h3",{attrs:{id:"原型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#原型"}},[s._v("#")]),s._v(" 原型")]),s._v(" "),n("p",[s._v("拷贝构造函数原型如下：")]),s._v(" "),n("div",{staticClass:"language-cpp line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-cpp"}},[n("code",[n("span",{pre:!0,attrs:{class:"token function"}},[s._v("Test")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("Test"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("Test")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" Test"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[s._v("编译器的匹配举例如下：")]),s._v(" "),n("div",{staticClass:"language-cpp line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-cpp"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//此时匹配的就是Test(Test&)")]),s._v("\nTest t1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nTest "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("t2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("t1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//此时匹配的就是Test(const Test&)")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" Test t1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nTest "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("t2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("t1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("p",[s._v("所以，其实拷贝构造函数的原型一个就够了：")]),s._v(" "),n("ul",[n("li",[s._v("即 "),n("code",[s._v("const Test&")])]),s._v(" "),n("li",[s._v("因为即使非 "),n("code",[s._v("const")]),s._v(" 的变量，也可以被 "),n("code",[s._v("const")]),s._v(" 的参数所接收")])]),s._v(" "),n("div",{staticClass:"language-cpp line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-cpp"}},[n("code",[n("span",{pre:!0,attrs:{class:"token function"}},[s._v("Test")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" Test"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("h3",{attrs:{id:"原型拓展：默认参数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#原型拓展：默认参数"}},[s._v("#")]),s._v(" 原型拓展：默认参数")]),s._v(" "),n("blockquote",[n("p",[s._v("原型拓展")])]),s._v(" "),n("p",[s._v("由于 "),n("em",[n("strong",[s._v("默认参数")])]),s._v(" 的存在，所以其实下列原型也都是拷贝构造函数：")]),s._v(" "),n("div",{staticClass:"language-cpp line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-cpp"}},[n("code",[n("span",{pre:!0,attrs:{class:"token function"}},[s._v("Test")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("Test"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("Test")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("Test"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" a"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("Test")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" Test"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("Test")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" Test"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" a"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" b"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("blockquote",[n("p",[s._v("总结一下")])]),s._v(" "),n("p",[s._v("对于一个类 "),n("code",[s._v("Test")]),s._v(" ，只要满足下述条件，该构造函数就是拷贝构造函数：")]),s._v(" "),n("ol",[n("li",[s._v("构造函数的第一个参数是下列之一：\n"),n("ul",[n("li",[n("code",[s._v("Test&")])]),s._v(" "),n("li",[n("code",[s._v("const Test&")])]),s._v(" "),n("li",[n("code",[s._v("volatile Test&")])]),s._v(" "),n("li",[n("code",[s._v("const volatile Test&")])])])]),s._v(" "),n("li",[s._v("构造函数没有其它参数，或者其它参数都有默认值")])]),s._v(" "),n("blockquote",[n("p",[s._v("举一反三")])]),s._v(" "),n("p",[s._v("下列都不是拷贝构造函数，只是普通的构造函数，只是这些构造函数的参数存在对象的引用：")]),s._v(" "),n("div",{staticClass:"language-cpp line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-cpp"}},[n("code",[n("span",{pre:!0,attrs:{class:"token function"}},[s._v("Test")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("Test"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("Test")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" Test"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" a"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" b"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("Test")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" Test"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("blockquote",[n("p",[s._v("举一反四")])]),s._v(" "),n("p",[s._v("虽然下面的每一个都是拷贝构造函数，但是同时定义在一个类中时，是编译不过去的，因为同时存在多个可匹配的构造函数（道理大家都懂，此处只是顺便多说一句）：")]),s._v(" "),n("div",{staticClass:"language-cpp line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-cpp"}},[n("code",[n("span",{pre:!0,attrs:{class:"token function"}},[s._v("Test")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("Test"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("Test")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("Test"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" a"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("h3",{attrs:{id:"原型拓展：为何必须是"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#原型拓展：为何必须是"}},[s._v("#")]),s._v(" 原型拓展：为何必须是 "),n("code",[s._v("&")])]),s._v(" "),n("p",[s._v("拷贝构造函数的参数为什么必须用 "),n("code",[s._v("&")]),s._v(" 引用，也就是说，为什么不能使用下列原型：")]),s._v(" "),n("div",{staticClass:"language-cpp line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-cpp"}},[n("code",[n("span",{pre:!0,attrs:{class:"token function"}},[s._v("Test")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("Test"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("Test")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" Test"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[s._v("对于这个问题，我们可以先假设拷贝构造函数的参数不使用&引用，然后来推演看看会发生什么结果：")]),s._v(" "),n("ol",[n("li",[s._v("当需要将对象按值传递时，就会触发拷贝构造函数（参见前面讲的会触发拷贝构造函数的几种情况）；")]),s._v(" "),n("li",[s._v("而拷贝构造函数的目的，就是根据按值传递的对象 1 ，来创建出新的对象 2 ；")]),s._v(" "),n("li",[s._v("因此，为了达到按值传递的目的，会有一个自动触发拷贝构造函数来创建新对象的行为；")]),s._v(" "),n("li",[s._v("而拷贝构造函数本身也是函数，该函数的参数也是一个按值传递的对象；")]),s._v(" "),n("li",[s._v("那么，该参数如何生成呢，仍然是只能继续触发拷贝构造函数来生成；")]),s._v(" "),n("li",[s._v("所以，此时就死循环了，当然，专业术语叫「"),n("em",[n("strong",[s._v("无限递归")])]),s._v("」；")]),s._v(" "),n("li",[s._v("所以，"),n("em",[n("strong",[s._v("必须规定，拷贝构造函数的对象参数是 "),n("code",[s._v("&")]),s._v(" 引用")])]),s._v(" ；")])]),s._v(" "),n("p",[s._v("根据上述解释，我们承认也接受了这个事实：")]),s._v(" "),n("ul",[n("li",[s._v("对象参数使用 "),n("code",[s._v("&")]),s._v(" 引用，才是拷贝构造函数；")]),s._v(" "),n("li",[s._v("而不使用 "),n("code",[s._v("&")]),s._v(" 引用时，就不是拷贝构造函数，而只是普通的构造函数；")])]),s._v(" "),n("p",[s._v("所以，我们就定义一系列普通的构造函数：")]),s._v(" "),n("div",{staticClass:"language-cpp line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-cpp"}},[n("code",[n("span",{pre:!0,attrs:{class:"token function"}},[s._v("Test")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("Test t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("Test")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("Test t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" a"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("Test")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("Test t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" a"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" b"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[s._v("对于上面的普通构造函数，我们直觉理解的编译过程是：")]),s._v(" "),n("ol",[n("li",[s._v("编译器发现普通构造函数 "),n("code",[s._v("Test(Test t)")]),s._v(" ;")]),s._v(" "),n("li",[s._v("该构造函数存在参数 "),n("code",[s._v("t")]),s._v(" ，该参数是一个按值传递的对象；")]),s._v(" "),n("li",[s._v("因此，触发拷贝构造函数，来创建参数 "),n("code",[s._v("t")]),s._v(" ；")])]),s._v(" "),n("p",[s._v("然而事实是："),n("em",[n("strong",[s._v("编译器仍然报错，不允许这样的原型")])]),s._v(" 。原因是：")]),s._v(" "),n("ol",[n("li",[s._v("拷贝构造函数是 "),n("code",[s._v("Test(Test& t)")]),s._v(" ;")]),s._v(" "),n("li",[s._v("而此时发现存在一个普通构造函数 "),n("code",[s._v("Test(Test t)")]),s._v(" ;")]),s._v(" "),n("li",[s._v("那么，根据函数重载的原理，此时编译器是无法知道究竟该匹配哪一个构造函数的；")]),s._v(" "),n("li",[s._v("当然，"),n("strong",[s._v("这只是一个比较民间但易理解的解释")]),s._v("，因为编译器的错误提示并不是这样的；")]),s._v(" "),n("li",[s._v("所以我确实不明白，为什么编译器不使用我这个解释，当然，我相信是因为我没有理解透彻；")])]),s._v(" "),n("h3",{attrs:{id:"原型拓展：非-的例外"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#原型拓展：非-的例外"}},[s._v("#")]),s._v(" 原型拓展：非 "),n("code",[s._v("&")]),s._v(" 的例外")]),s._v(" "),n("p",[s._v("现在我们明白了几点：")]),s._v(" "),n("ol",[n("li",[s._v("拷贝构函数的对象参数必须使用 "),n("code",[s._v("&")]),s._v(" 引用；")]),s._v(" "),n("li",[s._v("需要将对象按值传递时，就会自动触发拷贝构造函数，来创建新的对象；")]),s._v(" "),n("li",[s._v("即使是普通的构造函数，如果参数涉及按值传递的对象，也会触发拷贝构造函数；")])]),s._v(" "),n("p",[s._v("所以，下面就是普通构造函数触发拷贝构造函数的例子：")]),s._v(" "),n("div",{staticClass:"language-cpp line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-cpp"}},[n("code",[n("span",{pre:!0,attrs:{class:"token function"}},[s._v("Test")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("Test t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" b"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("Test")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" a"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" Test t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[s._v("对于这个例子，执行过程如下：")]),s._v(" "),n("ol",[n("li",[s._v("准备该普通构造函数的参数；")]),s._v(" "),n("li",[s._v("发现按值传递的对象 "),n("code",[s._v("t")]),s._v(" ；")]),s._v(" "),n("li",[s._v("触发拷贝构造函数 "),n("code",[s._v("Test(const Test&)")]),s._v(" ；")]),s._v(" "),n("li",[s._v("创建临时对象 "),n("code",[s._v("t")]),s._v(" ；")]),s._v(" "),n("li",[s._v("运行该普通构造函数；")]),s._v(" "),n("li",[s._v("释放临时对象 "),n("code",[s._v("t")]),s._v(" ；")])]),s._v(" "),n("h3",{attrs:{id:"默认拷贝构造函数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#默认拷贝构造函数"}},[s._v("#")]),s._v(" 默认拷贝构造函数")]),s._v(" "),n("p",[s._v("编译器会生成 "),n("em",[n("strong",[s._v("默认的拷贝构造函数")])]),s._v(" ，规则如下：")]),s._v(" "),n("ol",[n("li",[s._v("默认拷贝构造函数原型是 "),n("code",[s._v("Test(const Test&)")]),s._v(" 或 "),n("code",[s._v("Test(Test&)")]),s._v(" ，根据上下文决定；")]),s._v(" "),n("li",[s._v("默认拷贝构造函数的实现方式是："),n("em",[n("strong",[s._v("浅拷贝")])]),s._v(" ；")]),s._v(" "),n("li",[s._v("只要 "),n("em",[n("strong",[s._v("显式")])]),s._v(" 声明过任意一个拷贝构造函数，则编译器就不会再生成默认拷贝构造函数；")])]),s._v(" "),n("h2",{attrs:{id:"拷贝构造函数的几种情况"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#拷贝构造函数的几种情况"}},[s._v("#")]),s._v(" 拷贝构造函数的几种情况")]),s._v(" "),n("blockquote",[n("p",[s._v("下面是触发拷贝构造函数的几种情况分析，要清晰的看到整个过程，建议直接编写代码，分别在拷贝构造函数中、析构函数中都打印输出信息，本文中不想贴上大量的测试代码，因为这会影响文章版面的精美。")])]),s._v(" "),n("h3",{attrs:{id:"函数参数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#函数参数"}},[s._v("#")]),s._v(" 函数参数")]),s._v(" "),n("p",[s._v("包括普通函数、构造函数，例如：")]),s._v(" "),n("div",{staticClass:"language-cpp line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-cpp"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("func")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("Test t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\nTest t1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("func")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("t1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[s._v("则执行过程如下：")]),s._v(" "),n("ol",[n("li",[s._v("触发拷贝构造函数，根据 "),n("code",[s._v("t1")]),s._v(" 对象创建临时对象 "),n("code",[s._v("t")]),s._v(" ；")]),s._v(" "),n("li",[s._v("将该临时对象 "),n("code",[s._v("t")]),s._v(" 作为 "),n("code",[s._v("func")]),s._v(" 函数的参数；")]),s._v(" "),n("li",[s._v("执行 "),n("code",[s._v("func")]),s._v(" 函数；")]),s._v(" "),n("li",[n("code",[s._v("func")]),s._v(" 函数执行完毕，自动析构临时对象 "),n("code",[s._v("t")]),s._v(" ；")])]),s._v(" "),n("h3",{attrs:{id:"函数返回"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#函数返回"}},[s._v("#")]),s._v(" 函数返回")]),s._v(" "),n("p",[s._v("例如：")]),s._v(" "),n("div",{staticClass:"language-cpp line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-cpp"}},[n("code",[s._v("Test "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("func")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    Test t1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" t1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" \n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("func")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nTest t2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("func")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br")])]),n("p",[s._v("则执行过程如下：")]),s._v(" "),n("ol",[n("li",[s._v("执行 "),n("code",[s._v("func()")]),s._v(" ；")]),s._v(" "),n("li",[s._v("创建 "),n("code",[s._v("t1")]),s._v(" 对象，该对象的创建是通过普通构造函数 "),n("code",[s._v("Test()")]),s._v(" ；")]),s._v(" "),n("li",[s._v("触发拷贝构造函数，根据 "),n("code",[s._v("t1")]),s._v(" 对象创建临时对象 "),n("code",[s._v("t")]),s._v(" ；")]),s._v(" "),n("li",[s._v("将临时对象 "),n("code",[s._v("t")]),s._v(" 返回；")]),s._v(" "),n("li",[n("code",[s._v("func()")]),s._v(" 执行完毕，"),n("code",[s._v("t1")]),s._v(" 自动被析构；")])]),s._v(" "),n("p",[s._v("需要注意的是：")]),s._v(" "),n("ul",[n("li",[s._v("如果没有使用变量来接收返回值，即 "),n("code",[s._v("func()")]),s._v(" ，那么，返回值就是临时对象 "),n("code",[s._v("t")]),s._v(" ，且 "),n("code",[s._v("func()")]),s._v(" 执行完后，该临时对象就立即被析构了；")]),s._v(" "),n("li",[s._v("如果使用了变量接收返回值，即 "),n("code",[s._v("Test t2 = func()")]),s._v(" ，那么，"),n("code",[s._v("t2")]),s._v(" 就是这个临时对象 "),n("code",[s._v("t")]),s._v(" ，也就是说，并不会再次触发拷贝构造函数，来根据 "),n("code",[s._v("t")]),s._v(" 创建对象 "),n("code",[s._v("t2")]),s._v(" ；而此时 "),n("code",[s._v("t2")]),s._v(" 的析构取决于具体的程序；")])]),s._v(" "),n("p",[s._v("值得讨论的是 "),n("code",[s._v("t1")]),s._v(" 和 "),n("code",[s._v("t")]),s._v(" 的生存周期：")]),s._v(" "),n("ul",[n("li",[n("code",[s._v("t1")]),s._v(" 是在 "),n("code",[s._v("func()")]),s._v(" 函数体内显式创建的，且 "),n("code",[s._v("t1")]),s._v(" 的生存周期也仅局限于 "),n("code",[s._v("func()")]),s._v(" 函数体内，因此在 "),n("code",[s._v("func()")]),s._v(" 执行完毕后，"),n("code",[s._v("t1")]),s._v(" 也就自动被析构了；")]),s._v(" "),n("li",[n("code",[s._v("t")]),s._v(" 是根据 "),n("code",[s._v("t1")]),s._v(" ，通过拷贝构造函数创建的，其生存周期取决于具体的接收者")])]),s._v(" "),n("h3",{attrs:{id:"对象赋值"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#对象赋值"}},[s._v("#")]),s._v(" 对象赋值")]),s._v(" "),n("p",[s._v("例如：")]),s._v(" "),n("div",{staticClass:"language-cpp line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-cpp"}},[n("code",[s._v("Test t1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nTest t2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" t1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[s._v("则执行过程如下：")]),s._v(" "),n("ol",[n("li",[s._v("创建 "),n("code",[s._v("t1")]),s._v(" 对象，该对象的创建是通过普通构造函数 "),n("code",[s._v("Test()")]),s._v(" ；")]),s._v(" "),n("li",[s._v("触发拷贝构造函数，根据 "),n("code",[s._v("t1")]),s._v(" 对象创建 "),n("code",[s._v("t2")]),s._v(" 对象；")])]),s._v(" "),n("p",[s._v("对象的 "),n("em",[n("strong",[s._v("直接赋值")])]),s._v(" 其实和 "),n("em",[n("strong",[s._v("直接调用拷贝构造函数")])]),s._v(" 是等价的：")]),s._v(" "),n("div",{staticClass:"language-cpp line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-cpp"}},[n("code",[s._v("Test t1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nTest "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("t2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("t1"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("h2",{attrs:{id:"向-java-net-看齐"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#向-java-net-看齐"}},[s._v("#")]),s._v(" 向 JAVA / .NET 看齐")]),s._v(" "),n("blockquote",[n("p",[s._v("在 JAVA / .NET 语法中，对象统一都是引用传递，因此不存在对象按值传递的问题。且个人认为，C++ 对象的按值传递实在不值得推崇。当然，推崇或不推崇，语法功能就摆在那里。")])]),s._v(" "),n("p",[s._v("但其实，对于 C++ 来说，也可以通过一些技巧来屏蔽对象的按值传递功能：")]),s._v(" "),n("ol",[n("li",[s._v("针对某个类，使得该类的对象不可以按值传递；")]),s._v(" "),n("li",[s._v("所谓的屏蔽，是当开发者打算按值传递时，发生编译错误；")])]),s._v(" "),n("p",[s._v("方法是：")]),s._v(" "),n("ul",[n("li",[s._v("在类中声明拷贝构造函数，但是不要实现它；")]),s._v(" "),n("li",[s._v("如果实在需要实现拷贝构造函数，就将它定义为 "),n("code",[s._v("private")]),s._v(" ，例如工厂模式时；")])]),s._v(" "),n("p",[s._v("例如：")]),s._v(" "),n("div",{staticClass:"language-cpp line-numbers-mode"},[n("div",{staticClass:"highlight-lines"},[n("br"),n("br"),n("br"),n("br"),n("div",{staticClass:"highlighted"},[s._v(" ")]),n("br"),n("div",{staticClass:"highlighted"},[s._v(" ")]),n("br"),n("br"),n("br")]),n("pre",{pre:!0,attrs:{class:"language-cpp"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Test")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//声明但不实现")]),s._v("\n\t"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("Test")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("Test"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v(" t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//声明但不实现")]),s._v("\n\t"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("Test")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" Test"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v(" t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//...")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br")])]),n("p",[s._v("又如：")]),s._v(" "),n("div",{staticClass:"language-cpp line-numbers-mode"},[n("div",{staticClass:"highlight-lines"},[n("br"),n("br"),n("br"),n("br"),n("div",{staticClass:"highlighted"},[s._v(" ")]),n("br"),n("br"),n("div",{staticClass:"highlighted"},[s._v(" ")]),n("br"),n("br"),n("br"),n("br")]),n("pre",{pre:!0,attrs:{class:"language-cpp"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Test")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//声明但不实现")]),s._v("\n\t"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("Test")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("Test"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v(" t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//声明且实现，但定义为 private")]),s._v("\n\t"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("Test")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" Test"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&")]),s._v(" t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//...")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br")])]),n("h2",{attrs:{id:"总结"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[s._v("#")]),s._v(" 总结")]),s._v(" "),n("ul",[n("li",[s._v("C++ 允许对象的按值传递；")]),s._v(" "),n("li",[s._v("按值传递有几种情况：\n"),n("ul",[n("li",[s._v("对象作为函数参数")]),s._v(" "),n("li",[s._v("对象作为函数返回")]),s._v(" "),n("li",[s._v("对象直接赋值")])])]),s._v(" "),n("li",[s._v("按值传递时，会根据对象 "),n("code",[s._v("a")]),s._v(" 创建新对象 "),n("code",[s._v("b")]),s._v(" ，步骤是：\n"),n("ol",[n("li",[s._v("分配新对象 "),n("code",[s._v("b")]),s._v(" 的空间")]),s._v(" "),n("li",[s._v("然后在新对象 "),n("code",[s._v("b")]),s._v(" 的空间上执行构造函数")]),s._v(" "),n("li",[s._v("而执行的这个构造函数就是拷贝构造函数")])])]),s._v(" "),n("li",[s._v("拷贝构造函数的原型：\n"),n("ul",[n("li",[s._v("第一个参数是对象类型的 "),n("code",[s._v("const")]),s._v(" / 非 "),n("code",[s._v("const")]),s._v(" 的引用")]),s._v(" "),n("li",[s._v("除此之外，没有其它参数，或其它参数都有默认值")])])]),s._v(" "),n("li",[s._v("只要 "),n("em",[n("strong",[s._v("显式")])]),s._v(" 声明过拷贝构造函数，编译器就不会再生成默认拷贝构造函数；")]),s._v(" "),n("li",[s._v("默认拷贝构造函数的实现方式是 "),n("em",[n("strong",[s._v("浅拷贝")])]),s._v(" ；")])])])}),[],!1,null,null,null);t.default=e.exports}}]);