(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{427:function(s,t,a){s.exports=a.p+"assets/img/01-01.5b28c9cd.png"},428:function(s,t,a){s.exports=a.p+"assets/img/01-02.d1a6a44f.png"},506:function(s,t,a){"use strict";a.r(t);var n=a(27),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,n=s._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h1",{attrs:{id:"_15-1-使用-box"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_15-1-使用-box"}},[s._v("#")]),s._v(" 15.1. 使用 "),n("em",[n("strong",[s._v("Box")])])]),s._v(" "),n("p",[s._v("关于 "),n("em",[n("strong",[s._v("box")])]),s._v(" ：")]),s._v(" "),n("ul",[n("li",[s._v("它是最简单直观的智能指针")]),s._v(" "),n("li",[s._v("对应的类型是 "),n("code",[s._v("Box<T>")])]),s._v(" "),n("li",[s._v("它允许将数据存储在 heap 中而不是 stack 中")]),s._v(" "),n("li",[s._v("当然，这个智能指针本身是存储在 stack 中，然后它指向 heap 中的数据")]),s._v(" "),n("li",[s._v("除了将数据存储在 heap 而不是 stack 之外，它不会带来额外的性能损失；但同时，它也不再具备其它能力")])]),s._v(" "),n("p",[s._v("使用 "),n("em",[n("strong",[s._v("box")])]),s._v(" 的场景：")]),s._v(" "),n("blockquote",[n("p",[s._v("对大量数据进行所有权转移时，不希望这些数据被拷贝")])]),s._v(" "),n("ul",[n("li",[s._v("对大量数据进行所有权转移时，会耗费很多时间来拷贝到 stack")]),s._v(" "),n("li",[s._v("改进的办法是，使用 box 将这些数据存储在 heap 中")]),s._v(" "),n("li",[s._v("从而在转移所有权时，只有对应的少量指针会被拷贝到 stack ，而所指向的数据仍然在 heap 中")])]),s._v(" "),n("blockquote",[n("p",[s._v("无法在编译时知道某种数据类型的大小，但是在某种场景下，要访问该数据类型的值时，却需要知道该类型的精确大小")])]),s._v(" "),n("ul",[n("li",[s._v("后续关于「Recursive Type」的章节中会讲解这种场景")])]),s._v(" "),n("blockquote",[n("p",[s._v("在 own 某个数据时，只关心这种数据类型实现了某些 trait ，而不关心具体是哪一种数据类型")])]),s._v(" "),n("ul",[n("li",[s._v("Chapter17 一整章都是讲解这种场景")])]),s._v(" "),n("h2",{attrs:{id:"存储数据到-heap"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#存储数据到-heap"}},[s._v("#")]),s._v(" 存储数据到 Heap")]),s._v(" "),n("p",[s._v("先看 "),n("code",[s._v("Box<T>")]),s._v(" 的语法及如何访问存储在里面的值：")]),s._v(" "),n("div",{staticClass:"language-rust line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fn")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" b "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" Box"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("new")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("println!")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v('"b = {}"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" b"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[s._v("数据关系：")]),s._v(" "),n("ol",[n("li",[s._v("变量 b 的值是一个 box")]),s._v(" "),n("li",[s._v("该 box 指向数据 8")]),s._v(" "),n("li",[s._v("而 8 这个数据存储在 heap 中")])]),s._v(" "),n("p",[s._v("例子剖析：")]),s._v(" "),n("ul",[n("li",[s._v("该例子打印结果是 "),n("code",[s._v("b = 8")])]),s._v(" "),n("li",[s._v("也就是说，可以直接访问 box 中的数据，就像该数据是存储在 stack 中一样")])]),s._v(" "),n("p",[s._v("数据销毁机制：")]),s._v(" "),n("ul",[n("li",[s._v("与 own 机制一样，当 box 离开生存范围时，该 box 就会被销毁")]),s._v(" "),n("li",[s._v("在该例子中，b 离开 "),n("code",[s._v("main")]),s._v(" 之后，b 就会被销毁")]),s._v(" "),n("li",[s._v("销毁的内容包括：第一，box 本身，也就是变量 b ，存储在 stack 中；第二，box 也就是 b 所指向的数据，存储在 heap 中")])]),s._v(" "),n("p",[s._v("补充：")]),s._v(" "),n("ol",[n("li",[s._v("该例子将一个简单数据类型存储在 box 中，这仅仅只是为了演示，因为这种做法没有意义")]),s._v(" "),n("li",[s._v("对于像 "),n("code",[s._v("i32")]),s._v(" 这种简单数据类型，更合适的方式是让它默认存储在 stack 中")]),s._v(" "),n("li",[s._v("后续会展示一些更有用的场景，可以看到只有通过 box 才能定义一些数据类型，而不使用 box 就无法做到")])]),s._v(" "),n("h2",{attrs:{id:"使用-recursive-type"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#使用-recursive-type"}},[s._v("#")]),s._v(" 使用 Recursive Type")]),s._v(" "),n("p",[s._v("什么是 Recursive Type：")]),s._v(" "),n("ul",[n("li",[s._v("即递归类型")]),s._v(" "),n("li",[s._v("例如，某个类型中包含多份值，其中某份值又是同样的该类型")]),s._v(" "),n("li",[s._v("先用 "),n("em",[s._v("cons list")]),s._v(" 来举例说明")])]),s._v(" "),n("p",[s._v("什么是 "),n("em",[s._v("cons list")]),s._v(" ：")]),s._v(" "),n("ul",[n("li",[s._v("函数式编程语言中常见的类型，来源于 Lisp")]),s._v(" "),n("li",[s._v("在 Lisp 中，通过 "),n("code",[s._v("cons")]),s._v(" 函数（即 construct function）来构造一个新的列表，而这两个参数分别是一个单独的值和另一个旧的列表")]),s._v(" "),n("li",[n("code",[s._v("cons")]),s._v(" 函数表达了一种很常见的函数式编程术语：「将 x 与 y 连接」，其中，x 是一个元素，y 是一个列表，连接得到新的列表，x 在该新列表的开头")]),s._v(" "),n("li",[s._v("在 "),n("em",[s._v("cons list")]),s._v(" 中，每一项都包含两个元素，即当前值和下一项，如果下一项的值是 "),n("code",[s._v("Nil")]),s._v(" 则表示结束")]),s._v(" "),n("li",[s._v("注意，此处的 "),n("code",[s._v("Nil")]),s._v(" 是一种代表终止条件的规范名称，与 "),n("code",[s._v("null")]),s._v(" 是不同的")])]),s._v(" "),n("p",[s._v("注意：")]),s._v(" "),n("ul",[n("li",[s._v("虽然函数式编程语言中经常使用 "),n("code",[s._v("cons list")]),s._v(" ，但在 rust 中并不常见")]),s._v(" "),n("li",[s._v("此处使用 "),n("code",[s._v("cons list")]),s._v(" 只是为了表达递归类型")]),s._v(" "),n("li",[s._v("在 rust 中，要使用列表时，最好的选择是 "),n("code",[s._v("Vec<T>")])])]),s._v(" "),n("h3",{attrs:{id:"举例：rust-计算类型大小"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#举例：rust-计算类型大小"}},[s._v("#")]),s._v(" 举例：rust 计算类型大小")]),s._v(" "),n("p",[s._v("说明：")]),s._v(" "),n("ul",[n("li",[s._v("rust 在编译时，需要计算类型所占用的空间大小")]),s._v(" "),n("li",[s._v("此处先看一个简单的非递归类型，看看 rust 如何计算类型的大小")])]),s._v(" "),n("p",[s._v("类型代码：")]),s._v(" "),n("div",{staticClass:"language-rust line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("enum")]),s._v(" Message "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    Quit"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    Move "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" x"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" i32"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" y"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" i32 "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("Write")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("String"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n    "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("ChangeColor")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("i32"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" i32"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" i32"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("p",[s._v("计算规则：")]),s._v(" "),n("ul",[n("li",[s._v("该类型是一个 "),n("code",[s._v("enum")]),s._v(" 类型")]),s._v(" "),n("li",[n("code",[s._v("Quit")]),s._v(" 不需要占用空间")]),s._v(" "),n("li",[n("code",[s._v("Move")]),s._v(" 需要占用两个 "),n("code",[s._v("i32")]),s._v(" 的空间")]),s._v(" "),n("li",[s._v("以此类推")]),s._v(" "),n("li",[s._v("因此，占用空间最大的那个成员，决定了 "),n("code",[s._v("Message")]),s._v(" 所占用的空间大小")])]),s._v(" "),n("h3",{attrs:{id:"递归类型的大小无法计算"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#递归类型的大小无法计算"}},[s._v("#")]),s._v(" 递归类型的大小无法计算")]),s._v(" "),n("p",[s._v("下面来定义我们的 "),n("code",[s._v("cons list")]),s._v(" ：")]),s._v(" "),n("div",{staticClass:"language-rust line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("enum")]),s._v(" RList "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("Cons")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("i32"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" RList"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  Nil"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[s._v("然后使用该 "),n("code",[s._v("cons list")]),s._v(" ：")]),s._v(" "),n("div",{staticClass:"language-rust line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("use")]),s._v(" RList"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fn")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" rlist "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("Cons")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("Cons")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("Cons")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" Nil"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[s._v("编译报错，提示如下：")]),s._v(" "),n("div",{staticClass:"language-shell line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[s._v("error"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("E0072"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(": recursive "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("type")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token variable"}},[n("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")]),s._v("RList"),n("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")])]),s._v(" has infinite size\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[s._v("错误剖析：")]),s._v(" "),n("ul",[n("li",[s._v("错误信息告知，"),n("code",[s._v("RList")]),s._v(" 类型「有无限的大小」，因为 "),n("code",[s._v("RList")]),s._v(" 的 "),n("code",[s._v("Cons")]),s._v(" 成员中，又包含了同样的 "),n("code",[s._v("RList")]),s._v(" 类型")]),s._v(" "),n("li",[s._v("也就是说，"),n("code",[s._v("RList")]),s._v(" 的 "),n("code",[s._v("Cons")]),s._v(" 成员是一种递归类型")]),s._v(" "),n("li",[s._v("rust 编译器在计算 "),n("code",[s._v("RList")]),s._v(" 类型的大小时，看到 "),n("code",[s._v("Cons")]),s._v(" 成员，发现需要一个 "),n("code",[s._v("i32")]),s._v(" 空间再加上一个 "),n("code",[s._v("RList")]),s._v(" 空间")]),s._v(" "),n("li",[s._v("接着为了计算 "),n("code",[s._v("RList")]),s._v(" 空间，又再次从 "),n("code",[s._v("Cons")]),s._v(" 成员开始，发现需要一个 "),n("code",[s._v("i32")]),s._v(" 空间再加上一个 "),n("code",[s._v("RList")]),s._v(" 空间")]),s._v(" "),n("li",[s._v("就这样，计算无限进行，也就是无限递归下去，如下图所示：")])]),s._v(" "),n("p",[n("img",{attrs:{src:a(427),alt:"01-01"}})]),s._v(" "),n("h3",{attrs:{id:"在递归类型中使用-box-t"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#在递归类型中使用-box-t"}},[s._v("#")]),s._v(" 在递归类型中使用 "),n("code",[s._v("Box<T>")])]),s._v(" "),n("p",[s._v("解决方式：")]),s._v(" "),n("ul",[n("li",[n("code",[s._v("Box<T>")]),s._v(" 本质是一种指针，它的空间大小是固定的，不会因为所指向的具体内容而改变")]),s._v(" "),n("li",[s._v("因此，解决办法是，在 "),n("code",[s._v("Cons")]),s._v(" 成员中不要直接存放另一个 "),n("code",[s._v("RList")]),s._v(" ，而是存放一个 "),n("code",[s._v("Box")]),s._v(" ，再让这个 "),n("code",[s._v("Box")]),s._v(" 指向另一个 "),n("code",[s._v("RList")])]),s._v(" "),n("li",[s._v("这和 C 语言中的单向链表是一个道理，链表中每个元素也会有两份值，一份是当前元素的值，另一份是指向下一个元素的指针；C 语言中指针的空间大小是固定的，对应 rust 中，智能指针 "),n("code",[s._v("Box")]),s._v(" 的空间大小也是固定的")])]),s._v(" "),n("p",[s._v("代码改进：")]),s._v(" "),n("div",{staticClass:"language-rust line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-rust"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("enum")]),s._v(" RList "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("Cons")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("i32"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" Box"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("RList"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  Nil"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("use")]),s._v(" RList"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fn")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" rlist "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("Cons")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" \n  \tBox"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("new")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("Cons")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  \t\tBox"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("new")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("Cons")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  \t\t\tBox"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("new")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("Nil"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br")])]),n("p",[s._v("代码剖析：")]),s._v(" "),n("ul",[n("li",[s._v("此时 rust 能够计算 "),n("code",[s._v("RList")]),s._v(" 的空间大小")]),s._v(" "),n("li",[n("code",[s._v("Cons")]),s._v(" 成员需要一个 "),n("code",[s._v("i32")]),s._v(" 空间再加上一个 "),n("code",[s._v("Box")]),s._v(" 的空间")]),s._v(" "),n("li",[n("code",[s._v("Nil")]),s._v(" 成员不需要占用空间")]),s._v(" "),n("li",[s._v("因此，"),n("code",[s._v("RList")]),s._v(" 的空间大小是 "),n("code",[s._v("Cons")]),s._v(" 成员的大小，即一个 "),n("code",[s._v("i32")]),s._v(" 空间再加上一个 "),n("code",[s._v("Box")]),s._v(" 的空间")]),s._v(" "),n("li",[s._v("此时 "),n("code",[s._v("Cons")]),s._v(" 成员的空间大小如下图：")])]),s._v(" "),n("p",[n("img",{attrs:{src:a(428),alt:"01-02"}})]),s._v(" "),n("h3",{attrs:{id:"后续内容"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#后续内容"}},[s._v("#")]),s._v(" 后续内容")]),s._v(" "),n("ul",[n("li",[n("code",[s._v("Box<T>")]),s._v(" 是一种智能指针，它实现了 "),n("code",[s._v("Deref")]),s._v(" 这个 trait ，所以 "),n("code",[s._v("Box<T>")]),s._v(" 可以被当做引用看待")]),s._v(" "),n("li",[s._v("当 "),n("code",[s._v("Box<T>")]),s._v(" 离开作用域时，由于 "),n("code",[s._v("Box<T>")]),s._v(" 实现了 "),n("code",[s._v("Drop")]),s._v(" 这个 trait ，因此 "),n("code",[s._v("Box<T>")]),s._v(" 所指向的堆数据也会被自动清除")]),s._v(" "),n("li",[s._v("后续会详细讲解这两个重要的 trait")])])])}),[],!1,null,null,null);t.default=e.exports}}]);