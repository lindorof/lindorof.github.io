(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{549:function(s,t,a){"use strict";a.r(t);var e=a(27),r=Object(e.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"_3-1-变量和可变性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-变量和可变性"}},[s._v("#")]),s._v(" 3.1. 变量和可变性")]),s._v(" "),a("p",[s._v("该章节内容包括：Variables, Basic Data Types, Functions, Comments, Control Flow.")]),s._v(" "),a("h2",{attrs:{id:"变量声明"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#变量声明"}},[s._v("#")]),s._v(" 变量声明")]),s._v(" "),a("p",[s._v("声明方式如下：")]),s._v(" "),a("div",{staticClass:"language-rust line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("mut")]),s._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("变量的总结：")]),s._v(" "),a("ul",[a("li",[s._v("变量默认是不可变的，是为了程序更安全，避免无意识的值变化所的程序错误，而且可以更便于处理并发场景；")]),s._v(" "),a("li",[s._v("变量声明为不可变时，编译器会检查并确保该变量后续没有被变更过，因此开发人员不用自行检查并确认代码是否由于疏漏而被改变过")]),s._v(" "),a("li",[s._v("若变量需要可变，则需要手动增加mut标识")])]),s._v(" "),a("p",[s._v("变量可变性的权衡：")]),s._v(" "),a("ul",[a("li",[s._v("对于比较大的数据结构，在适当的位置改变其内容，比起重新分配新的实例然后再拷贝和返回来说，前者更快一些")]),s._v(" "),a("li",[s._v("而对于比较小的数据结构，分配新的实例并在适当的函数中完成赋值则更容易理解和阅读")]),s._v(" "),a("li",[s._v("因此，变量可变性的权衡点就是性能")])]),s._v(" "),a("h2",{attrs:{id:"变量覆盖"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#变量覆盖"}},[s._v("#")]),s._v(" 变量覆盖")]),s._v(" "),a("p",[s._v("可以在同一个作用域内，声明同样名称的变量，例如：")]),s._v(" "),a("div",{staticClass:"language-rust line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" x"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("mut")]),s._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" x"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"abc"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("覆盖的特点：")]),s._v(" "),a("ol",[a("li",[s._v("后续声明的变量会覆盖前面的变量")]),s._v(" "),a("li",[s._v("后续声明的变量可以重新指定类型以及可变性")]),s._v(" "),a("li",[s._v("后续声明的变量所绑定的值可通过同名的前变量来获得")])]),s._v(" "),a("p",[s._v("覆盖和MUT的区别：")]),s._v(" "),a("ol",[a("li",[s._v("mut变量是一直都可以直接改变值的，例如x=1;x=2;")]),s._v(" "),a("li",[s._v("对于非mut的变量，不可以直接改变值，但加上let之后，就是重新声明同名变量；")]),s._v(" "),a("li",[s._v("如果新声明的变量是非mut的，则重新声明之后仍然是不可改变的；")])]),s._v(" "),a("p",[s._v("覆盖的最大意义是：更容易声明和使用变量，例如：")]),s._v(" "),a("blockquote",[a("p",[s._v('需要一个字符串类型的变量来接收用户的输入，但是，最后程序中我们需要将用户输入的字符串转为数字。因此，我们就可以使用同一个名称"number"，而不是"number_str"和"number_int"')])]),s._v(" "),a("h2",{attrs:{id:"常量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常量"}},[s._v("#")]),s._v(" 常量")]),s._v(" "),a("p",[s._v("常量的声明：")]),s._v(" "),a("div",{staticClass:"language-rust line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" MAX "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" u32 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("999")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("常量与变量的区别：")]),s._v(" "),a("ul",[a("li",[s._v("常量必须、只能、且默认是不可变的，但变量可通过mut来声明为可变的")]),s._v(" "),a("li",[s._v("声明的语法不同，使用关键字const")]),s._v(" "),a("li",[s._v("常量声明时候必须指明类型，编译器不会进行自动推导")]),s._v(" "),a("li",[s._v("==常量可以是一个表达式而不是一个值，这个表达式可能在运行时才能被计算出来==")])]),s._v(" "),a("p",[s._v("常量的命名规范：")]),s._v(" "),a("ol",[a("li",[s._v("全部使用大写")]),s._v(" "),a("li",[s._v("使用'_'来进行单词之间的分隔")]),s._v(" "),a("li",[s._v("可以使用'_'来代替数字表达中的','，从而更便于代码阅读，例如数字\"100,000\"可声明为常量如下：")])]),s._v(" "),a("div",{staticClass:"language-rust line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" MAX_BALANCE"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" u32 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("100_000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("常量的作用域：")]),s._v(" "),a("ul",[a("li",[s._v("常量可以在任何作用域来声明")]),s._v(" "),a("li",[s._v("常量在所声明的作用域内，是一直可用的")])]),s._v(" "),a("blockquote",[a("p",[s._v("例如，在应用程序域声明常量，则在整个应用程序的所有代码中都可以使用，比如一个游戏程序中所设定的最大奖励金额")])]),s._v(" "),a("p",[s._v("常量的必要性：")]),s._v(" "),a("ul",[a("li",[s._v("将程序中需要硬编码的值作为常量是有必要的")]),s._v(" "),a("li",[s._v("这样确保代码未来更容易维护")]),s._v(" "),a("li",[s._v("且确保了只需变更一处代码即可更新该值")])])])}),[],!1,null,null,null);t.default=r.exports}}]);