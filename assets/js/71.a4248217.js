(window.webpackJsonp=window.webpackJsonp||[]).push([[71],{511:function(t,r,e){"use strict";e.r(r);var o=e(27),a=Object(o.a)({},(function(){var t=this,r=t.$createElement,e=t._self._c||r;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"_13-4-性能比较-loop-iterator"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_13-4-性能比较-loop-iterator"}},[t._v("#")]),t._v(" 13.4. 性能比较 Loop & Iterator")]),t._v(" "),e("h3",{attrs:{id:"关于性能比较"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#关于性能比较"}},[t._v("#")]),t._v(" 关于性能比较")]),t._v(" "),e("ul",[e("li",[t._v("对于 "),e("code",[t._v("for")]),t._v(" 和 iterator ，Rust 做过 "),e("em",[e("strong",[t._v("benchmark")])]),t._v(" 测试，测试结果是：iterator 要稍微更快一些")]),t._v(" "),e("li",[t._v("本章的重点不是解释 "),e("em",[e("strong",[t._v("benchmark")])]),t._v(" 测试，也不是证明 "),e("code",[t._v("for")]),t._v(" 和 iterator 究竟谁的性能更优，而是要说明 Rust 的机制")])]),t._v(" "),e("h3",{attrs:{id:"rust-机制"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#rust-机制"}},[t._v("#")]),t._v(" Rust 机制")]),t._v(" "),e("ul",[e("li",[t._v("Rust 会确保高级抽象的代码例如 iterator 在编译以后，与直接书写低级抽象的代码例如 "),e("code",[t._v("for")]),t._v(" ，二者尽量保持一致，甚至还会进行额外的优化")]),t._v(" "),e("li",[t._v("例如，对于某些在编译期就确认 iterator 大小的代码，Rust 编译后不是进行 "),e("code",[t._v("for")]),t._v(" 循环，而是直接 "),e("em",[e("strong",[t._v("unroll")])]),t._v(" 即展开循环，替换为对应每次遍历的相关代码，避免循环带来的额外性能损耗；甚至将一些相关的变量和数据存储在 "),e("em",[e("strong",[t._v("register")])]),t._v(" ，带来更快的执行速率")])]),t._v(" "),e("h3",{attrs:{id:"rust-目标"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#rust-目标"}},[t._v("#")]),t._v(" Rust 目标")]),t._v(" "),e("p",[e("em",[e("strong",[t._v("zero-cost abstraction")])])]),t._v(" "),e("ul",[e("li",[t._v("即零抽象")]),t._v(" "),e("li",[t._v("而 iterator 就是 Rust 零抽象实现的特性之一")]),t._v(" "),e("li",[t._v("也就是说，我们可以使用这些高级抽象特性，而不用担心会带来额外的运行时性能损耗")])]),t._v(" "),e("p",[t._v("这与 C++ 之父 Bjarne Stroustrup 在「Foundations of C++」(2012) 中定义的 "),e("em",[e("strong",[t._v("zero-overhead")])]),t._v(" 一致：")]),t._v(" "),e("blockquote",[e("p",[t._v("In general, C++ implementations obey the zero-overhead principle: What you don’t use, you don’t pay for. And further: What you do use, you couldn’t hand code any better.")])]),t._v(" "),e("h2",{attrs:{id:"总结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),e("ol",[e("li",[t._v("Closure 和 iterator 是 Rust 从 "),e("em",[e("strong",[t._v("functional programming language")])]),t._v(" 即函数式编程语言中找到的灵感")]),t._v(" "),e("li",[t._v("它们使 Rust 具备了这种能力：编写高级别抽象的代码，使代码变得精简而易读，但不会带来额外的运行时性能损耗")]),t._v(" "),e("li",[t._v("Rust 的目标，是努力实现 "),e("em",[e("strong",[t._v("zero-cost abstraction")])]),t._v(" 即零抽象")])])])}),[],!1,null,null,null);r.default=a.exports}}]);