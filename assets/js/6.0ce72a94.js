(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{445:function(s,t,n){s.exports=n.p+"assets/img/01-01.57895697.png"},446:function(s,t,n){s.exports=n.p+"assets/img/01-02.4808fae5.png"},447:function(s,t,n){s.exports=n.p+"assets/img/01-03.b52a3447.png"},448:function(s,t,n){s.exports=n.p+"assets/img/01-04.3866bf82.png"},481:function(s,t,n){"use strict";n.r(t);var a=n(27),e=Object(a.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"_4-1-什么是所有权"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-什么是所有权"}},[s._v("#")]),s._v(" 4.1. 什么是所有权")]),s._v(" "),a("p",[s._v("OwnerShip是Rust独有的一个特性，它保证了内存的安全而不必使用GC。本章讨论OwnerShip以及相关联的一些特性：Borrow，Slice，以及Rust数据在内存中的排布。")]),s._v(" "),a("h3",{attrs:{id:"关于内存管理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#关于内存管理"}},[s._v("#")]),s._v(" 关于内存管理")]),s._v(" "),a("ul",[a("li",[s._v("所有程序在运行时都需要管理内存的使用")]),s._v(" "),a("li",[s._v("有的语言使用GC，有的语言则需要程序员手动显式的分配和释放内存")]),s._v(" "),a("li",[s._v("Rust则使用Ownership机制")]),s._v(" "),a("li",[s._v("Ownership机制包含一系列规则，由编译器在编译期间进行检查，因此在程序运行时，该机制不会降低运行效率")])]),s._v(" "),a("h3",{attrs:{id:"stack-heap"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#stack-heap"}},[s._v("#")]),s._v(" Stack & Heap")]),s._v(" "),a("p",[s._v("说明：")]),s._v(" "),a("ul",[a("li",[s._v("大多数编程语言不用考虑stack和heap")]),s._v(" "),a("li",[s._v("但对于系统级的语言来说，例如Rust，数据在stack或heap会影响到语言的行为，因此程序员需要对其做出明确的决定")]),s._v(" "),a("li",[s._v("stack和heap都是程序运行时可使用的内存，但他们有所不同")])]),s._v(" "),a("p",[s._v("Statck：")]),s._v(" "),a("ul",[a("li",[s._v("后进先出方式")]),s._v(" "),a("li",[s._v("stack效率高的原因是：\n"),a("ol",[a("li",[s._v("不需要查找位置来放入数据或取得数据，因为位置总是在顶部")]),s._v(" "),a("li",[s._v("stack中的数据必须有已知的、确定的大小")])])])]),s._v(" "),a("p",[s._v("Heap：")]),s._v(" "),a("ul",[a("li",[s._v("对于编译器无法确定大小的数据，或者大小可变的数据，就使用heap来存储")]),s._v(" "),a("li",[s._v("在heap上存储数据的过程，就是操作系统寻找合适的内存并告知该内存pointer的过程，叫做allocating")]),s._v(" "),a("li",[s._v("但是在stack放入数据的过程不能叫做allocating")]),s._v(" "),a("li",[s._v("由于pointer是已知的确定的大小，所以可以将pointer放入stack，在需要实际的数据时，在根据该pointer去获取")]),s._v(" "),a("li",[s._v("访问heap的数据比stack要慢，因为需要根据pointer去找到数据，另外，在heap上分配很大的内存也是耗时的")])]),s._v(" "),a("p",[s._v("调用函数时：")]),s._v(" "),a("ul",[a("li",[s._v("调用函数时，相关的数据被压入stack")]),s._v(" "),a("li",[s._v("函数运行结束后，相关的数据又被弹出stack")]),s._v(" "),a("li",[s._v("这些数据包括：\n"),a("ol",[a("li",[s._v("传递给函数的数据，可能包括指向heap内存的pointer")]),s._v(" "),a("li",[s._v("函数内的local变量")])])])]),s._v(" "),a("h3",{attrs:{id:"ownership规则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ownership规则"}},[s._v("#")]),s._v(" Ownership规则")]),s._v(" "),a("ol",[a("li",[s._v("Rust中的每个数据都一个对应的变量，这个变量就是数据的owner")]),s._v(" "),a("li",[s._v("任何时候该数据只能有一个owner")]),s._v(" "),a("li",[s._v("owner离开对应的scope之后，数据就被销毁")])]),s._v(" "),a("h3",{attrs:{id:"variable-scope"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#variable-scope"}},[s._v("#")]),s._v(" Variable Scope")]),s._v(" "),a("ul",[a("li",[s._v("scope就是程序中的某个区域，在该区域内，某个元素有效")]),s._v(" "),a("li",[s._v("变量从声明的位置开始，到对应的scope结束，在该范围内有效")])]),s._v(" "),a("p",[s._v("举例：")]),s._v(" "),a("div",{staticClass:"language-rust line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" s "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"number"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//other code")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("剖析：")]),s._v(" "),a("ol",[a("li",[s._v("通过{}形成了一个scope")]),s._v(" "),a("li",[s._v("变量s从声明开始就是有效的，知道离开该scope")])]),s._v(" "),a("h3",{attrs:{id:"the-string-type"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#the-string-type"}},[s._v("#")]),s._v(" The String Type")]),s._v(" "),a("p",[s._v("说明：")]),s._v(" "),a("ul",[a("li",[s._v("为了描述ownership的规则，需要借助String这个更复杂的数据类型")]),s._v(" "),a("li",[s._v("之前的内容里，涉及到该数据类型时，数据内容都是存储在stack上")]),s._v(" "),a("li",[s._v("现在需要考虑该数据在heap上的情况，并来看Rust是如何知道该数据何时应该被清理")]),s._v(" "),a("li",[s._v("后续使用String作为例子并重点介绍String与ownership的关系")])]),s._v(" "),a("p",[s._v("string & String：")]),s._v(" "),a("ul",[a("li",[s._v('程序中有些硬编码的字符串，例如 let s = "abc";它们是string')]),s._v(" "),a("li",[s._v("硬编码的字符串很方便，但并不适用于所有需要文本的场景\n"),a("ol",[a("li",[s._v("例如，它不是可mut的")]),s._v(" "),a("li",[s._v("又如，具体的字符串内容，在编译时无法知道，只有运行时才能知道，例如等待用户输入")])])]),s._v(" "),a("li",[s._v("硬编码的string在编译期就明确的知道内容，所以直接包含在可执行程序中，这也是为何硬编码string快速而高效的原因，但这是建立在string非mut的基础之上")]),s._v(" "),a("li",[s._v("但是我们无法在编译期把一些无法确定大小或者大小可变的字符串内存包含在二进制文件中")]),s._v(" "),a("li",[s._v("所以，有 String 这种类型，内存分配在heap上，且字符内容可变")]),s._v(" "),a("li",[s._v("String在Chapter8详细讲解")])]),s._v(" "),a("p",[s._v("举例：硬编码的string")]),s._v(" "),a("div",{staticClass:"language-rust line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" s "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hello"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("举例：内容可变的String")]),s._v(" "),a("div",{staticClass:"language-rust line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// create a String from a string literal using the from function")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("mut")]),s._v(" s "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" String"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("from")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hello"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// push_str() appends a literal to a String")]),s._v("\ns"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("push_str")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('", world!"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// This will print `hello, world!`")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("println!")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"{}"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("h3",{attrs:{id:"memory-allocation"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#memory-allocation"}},[s._v("#")]),s._v(" Memory & Allocation")]),s._v(" "),a("p",[s._v("对于String来说：")]),s._v(" "),a("ul",[a("li",[s._v("为了支持mut")]),s._v(" "),a("li",[s._v("也为了支持字符串内容可变")]),s._v(" "),a("li",[s._v("因此需要在heap上分配内存，且该内存在编译期无法确定")])]),s._v(" "),a("p",[s._v("所以 String 意味着：")]),s._v(" "),a("ol",[a("li",[s._v("内存必须在运行时通过操作系统获取")])]),s._v(" "),a("blockquote",[a("p",[s._v("对于这一点来说，在调用String::from的时候，就向操作系统申请一片内存，很多语言普遍都是这种行为")])]),s._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[s._v("在String使用完毕后，需要一个机制来归还内存给操作系统")])]),s._v(" "),a("blockquote",[a("p",[s._v("这一点与其它语言是不一样的，例如GC，需要随时保持跟踪和清理那些不再使用的内存，但Rust不是这样的机制")])]),s._v(" "),a("p",[s._v("Rust机制举例：")]),s._v(" "),a("div",{staticClass:"language-rust line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// s is valid from this point forward")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" s "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" String"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("from")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hello"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// do stuff with s")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// this scope is now over, and s is no longer valid")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("例子剖析：")]),s._v(" "),a("ol",[a("li",[s._v("Rust的机制是：变量离开scope后，所属于该变量的内存就自动归还")]),s._v(" "),a("li",[s._v("在该例子中，当变量 s 离开scope后，Rust自动调用 drop 方法")]),s._v(" "),a("li",[s._v("在 drop 方法中，String对应的实现就是释放内存")]),s._v(" "),a("li",[s._v("这种模式对Rust的代码编写有着深远的影响")]),s._v(" "),a("li",[s._v("这个例子看起来比较简单，但是还有更复杂的情况，比如多个变量都需要使用我们在heap上分配的内存数据时，因此后续会继续讲解这些更复杂的情况")])]),s._v(" "),a("blockquote",[a("p",[s._v("Rust的这种模式，类似C++的RAII机制")])]),s._v(" "),a("h3",{attrs:{id:"变量和数据的交互：move"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#变量和数据的交互：move"}},[s._v("#")]),s._v(" 变量和数据的交互：Move")]),s._v(" "),a("p",[s._v("在Rust中，有多种方式来实现多个变量与同一份数据的交互，先看一个例子：")]),s._v(" "),a("div",{staticClass:"language-rust line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" y "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("例子剖析：")]),s._v(" "),a("ul",[a("li",[s._v("将 5 绑定给变量 x")]),s._v(" "),a("li",[s._v("拷贝 x 的内容并绑定给变量 y")]),s._v(" "),a("li",[s._v("因此有两个变量， x 和 y，且两个变量的值都是 5")]),s._v(" "),a("li",[s._v("这两个变量都在 stack")]),s._v(" "),a("li",[s._v("该过程能够这样执行的原因是，int 类型的大小已知和确定的")])]),s._v(" "),a("p",[s._v("再看另一个 String 的例子：")]),s._v(" "),a("div",{staticClass:"language-rust line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" s1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" String"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("from")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hello"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" s2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" s1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("为了说明这个例子，需要先剖析 String 实际上包含了些什么：")]),s._v(" "),a("ol",[a("li",[s._v("一个 pointer 变量，指向存储 string 内容的内存")]),s._v(" "),a("li",[s._v("一个 length 变量")]),s._v(" "),a("li",[s._v("一个 capacity 变量")])]),s._v(" "),a("p",[s._v("上述 String 的三个变量存储在 stack ，如下图所示：\n"),a("img",{attrs:{src:n(445),alt:"png"}})]),s._v(" "),a("p",[s._v("因此，将 s1 赋值给 s2 的时候，String 的如下内容被拷贝到 stack：")]),s._v(" "),a("ul",[a("li",[s._v("pointer")]),s._v(" "),a("li",[s._v("length")]),s._v(" "),a("li",[s._v("capacity")])]),s._v(" "),a("p",[s._v("也就是说，pointer 所指向的 heap 中的数据并没有被拷贝，如下图：\n"),a("img",{attrs:{src:n(446),alt:"png"}})]),s._v(" "),a("p",[s._v("所以，这并不是我们预想中的样子，我们预想中希望 heap 的数据也可以拷贝，但这样的话，s2 = s1 这个操作就会影响运行时的程序性能，尤其是当 heap 中的数据比较大的时候，因此Rust不会这样做，如下图：")]),s._v(" "),a("p",[a("img",{attrs:{src:n(447),alt:"png"}})]),s._v(" "),a("p",[s._v("那么，按照之前的讨论，变量离开 scope 之后，对应的内存就会被释放：")]),s._v(" "),a("ul",[a("li",[s._v("变量 s1 和 s2 离开了 scope")]),s._v(" "),a("li",[s._v("它们的内存都被释放")]),s._v(" "),a("li",[s._v("但是 s1 和 s2 的 pointer 都指向了 heap 中同一片内存")]),s._v(" "),a("li",[s._v("所以 heap 中这片内存就被释放了两次")]),s._v(" "),a("li",[s._v("这可能带来内存错误，或者带来安全漏洞")])]),s._v(" "),a("p",[s._v("因此，这就是 Rust 的处理机制：")]),s._v(" "),a("ol",[a("li",[s._v("将 s1 赋值给 s2")]),s._v(" "),a("li",[s._v("Rust 只拷贝了 pointer/length/capacity")]),s._v(" "),a("li",[s._v("但不拷贝 pointer 所指向的 heap 中的内存")]),s._v(" "),a("li",[s._v("对应的，Rust认为此时 s1 已经无效，只有 s2 是有效的")]),s._v(" "),a("li",[s._v("因此，当 s1 离开 scope 后，Rust 不需要做任何事情")]),s._v(" "),a("li",[s._v("只有当 s2 离开 scope 后，Rust才会自动释放 s2 所关联的内存")])]),s._v(" "),a("p",[s._v("也就是说，这就是Rust的 Move 机制：")]),s._v(" "),a("ol",[a("li",[s._v("将 s1 赋值给 s2")]),s._v(" "),a("li",[s._v("Rust 进行浅拷贝而不是深拷贝")]),s._v(" "),a("li",[s._v("即：将 s1 move 给 s2，并将 s1 标记为无效")]),s._v(" "),a("li",[s._v("所以，Rust通过这样的行为，确保了不降低程序运行时的性能")])]),s._v(" "),a("p",[s._v("该 Move 机制如下图所示：\n"),a("img",{attrs:{src:n(448),alt:"png"}})]),s._v(" "),a("p",[s._v("用下面的例子印证一下，将 s1 赋值给 s2 以后，s1 已经无效，不能再使用，所以编译器报错，告知 s1 已经被 move 给 s2 ：")]),s._v(" "),a("div",{staticClass:"language-rust line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" s1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" String"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("from")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"this is s1"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" s2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" s1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("println!")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"{}"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" s1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("h3",{attrs:{id:"变量和数据的交互：clone"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#变量和数据的交互：clone"}},[s._v("#")]),s._v(" 变量和数据的交互：Clone")]),s._v(" "),a("p",[s._v("如果我们确实需要深拷贝，那么就要使用 clone 方法，例如：")]),s._v(" "),a("div",{staticClass:"language-rust line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" s1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" String"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("from")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hello"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" s2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" s1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("clone")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("println!")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"{}, {}"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" s1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" s2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("上面的例子就实现了 String 的深拷贝，此时 s1 仍然是有效的，但要注意，这些深拷贝的操作可能会是耗时的。")]),s._v(" "),a("h4",{attrs:{id:"变量和数据的交互：copy"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#变量和数据的交互：copy"}},[s._v("#")]),s._v(" 变量和数据的交互：Copy")]),s._v(" "),a("p",[s._v("先看一个例子：")]),s._v(" "),a("div",{staticClass:"language-rust line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" y "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("println!")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"{}, {}"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("例子剖析：")]),s._v(" "),a("ul",[a("li",[s._v("这段代码编译和运行都正常，即使没有调用 clone 方法，x 仍然是有效的，并没有被 move 给 y")]),s._v(" "),a("li",[s._v("这是因为这些数据类型的大小在编译期都是确定的，而且都是完全存储在 stack 的")]),s._v(" "),a("li",[s._v("所以对于这些数据类型来说，浅拷贝和深拷贝的效果是一样的，进而也没有必要调用 clone 方法")])]),s._v(" "),a("p",[s._v("这就是Rust的 Copy 特性：")]),s._v(" "),a("ol",[a("li",[s._v("可以为存储在 stack 的数据类型声明 Copy 特性")]),s._v(" "),a("li",[s._v("如果一个数据类型有 Copy 特性，那么将老的变量赋值给新的变量以后，老的变量仍然是可用的")]),s._v(" "),a("li",[s._v("如果一个数据类型或者该数据类型的任何一个部分声明了 Drop 特性，那么就不允许为该数据类型再声明 Copy 特性，否则会引起编译器报错")])]),s._v(" "),a("p",[s._v("具备 Copy 特性的数据类型规则：")]),s._v(" "),a("ul",[a("li",[s._v("简单的 Scalar 类型及组合")]),s._v(" "),a("li",[s._v("不需要内存分配或资源请求的类型")])]),s._v(" "),a("p",[s._v("下面是一些具备 Copy 特性的数据类型：")]),s._v(" "),a("ol",[a("li",[s._v("Scalar类型：整型，浮点，布尔，字符")]),s._v(" "),a("li",[s._v("所有元素都是 Copy 特性的Tuple，例如：\n"),a("ul",[a("li",[s._v("(i32, i32) 是 Copy 特性")]),s._v(" "),a("li",[s._v("(i32, String) 不是 Copy 特性")])])])]),s._v(" "),a("h3",{attrs:{id:"ownership-function"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ownership-function"}},[s._v("#")]),s._v(" Ownership & Function")]),s._v(" "),a("p",[s._v("函数对 ownership 的影响总结为：")]),s._v(" "),a("ol",[a("li",[s._v("传递一个值给函数，类似于绑定一个值给变量")]),s._v(" "),a("li",[s._v("传递一个变量给函数，则取决于变量的类型，可能 Move，可能 Copy")]),s._v(" "),a("li",[s._v("函数的返回值也取决于数据类型，可能 Move，可能 Copy")])]),s._v(" "),a("p",[s._v("下面的例子通过注释详细说明了这些规则：")]),s._v(" "),a("div",{staticClass:"language-rust line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Copy参数")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fn")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("makes_copy")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("some_integer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" i32"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("println!")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"{}"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" some_integer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Move参数")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fn")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("takes_ownership")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("some_string"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" String"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("println!")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"{}"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" some_string"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Move返回值")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fn")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("gives_ownership")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("->")]),s._v(" String "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" some_string "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" String"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("from")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hello"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    some_string\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Move参数之后，Move返回值")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fn")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("takes_and_gives_back")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a_string"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" String"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("->")]),s._v(" String "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    a_string\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fn")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*\n    变量 x 被 Copy 给函数，\n    函数的调用不会导致 x 无效\n    */")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("makes_copy")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    \n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*\n    变量 s 被 Move 给函数，\n    函数调用后 s 无效\n    */")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" s "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" String"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("from")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hello"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("takes_ownership")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    \n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*\n    函数创建了一个 String 变量，\n    然后由变量 s1 接管其 Ownership \n    */")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" s1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("gives_ownership")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    \n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*\n    变量 s2 被 Move 给函数，\n    然后被 s3 接管 Ownership\n    */")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" s2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" String"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("from")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hello"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" s3 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("takes_and_gives_back")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br"),a("span",{staticClass:"line-number"},[s._v("44")]),a("br"),a("span",{staticClass:"line-number"},[s._v("45")]),a("br"),a("span",{staticClass:"line-number"},[s._v("46")]),a("br"),a("span",{staticClass:"line-number"},[s._v("47")]),a("br"),a("span",{staticClass:"line-number"},[s._v("48")]),a("br"),a("span",{staticClass:"line-number"},[s._v("49")]),a("br"),a("span",{staticClass:"line-number"},[s._v("50")]),a("br"),a("span",{staticClass:"line-number"},[s._v("51")]),a("br")])]),a("p",[s._v("函数可以通过 tuple 返回多个值：")]),s._v(" "),a("div",{staticClass:"language-rust line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fn")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("calculate_length")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" String"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("->")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("String"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" usize"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" length "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("len")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fn")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" s1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" String"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("from")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"hello"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" len"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("calculate_length")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("s1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("println!")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("\"The length of '{}' is {}.\"")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" s2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" len"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("p",[s._v("拓展：")]),s._v(" "),a("ol",[a("li",[s._v("有时候我们希望函数使用一个变量但不要接管 ownship")]),s._v(" "),a("li",[s._v("例如一个变量传递给函数，函数执行之后我们还需要使用该变量")]),s._v(" "),a("li",[s._v("而重复的将参数 Move 给函数，然后函数又通过返回值 Move 出来太过繁琐")]),s._v(" "),a("li",[s._v("这就是后续要讲解的另一个特性，叫做 reference")])])])}),[],!1,null,null,null);t.default=e.exports}}]);