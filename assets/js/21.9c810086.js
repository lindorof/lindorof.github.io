(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{484:function(t,s,a){"use strict";a.r(s);var n=a(27),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"winform多线程剖析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#winform多线程剖析"}},[t._v("#")]),t._v(" WinForm多线程剖析")]),t._v(" "),a("p",[a("em",[t._v("如有谬误，请谅解并指正。")])]),t._v(" "),a("h2",{attrs:{id:"有坑先填"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#有坑先填"}},[t._v("#")]),t._v(" 有坑先填")]),t._v(" "),a("p",[t._v("无比惊讶的发现：")]),t._v(" "),a("ul",[a("li",[t._v("WinForm 窗体判断某个操作是否是跨线程执行，依据是 "),a("code",[t._v("new Form()")]),t._v(" 时所在线程")]),t._v(" "),a("li",[t._v("而不是消息循环（或者 "),a("code",[t._v("ShowDialog")]),t._v(" ）所在的线程")])]),t._v(" "),a("p",[t._v("也就是说：")]),t._v(" "),a("div",{staticClass:"language-csharp line-numbers-mode"},[a("div",{staticClass:"highlight-lines"},[a("div",{staticClass:"highlighted"},[t._v(" ")]),a("br"),a("br"),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("br"),a("br")]),a("pre",{pre:!0,attrs:{class:"language-csharp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LYForm")]),t._v(" f "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constructor-invocation class-name"}},[t._v("LYForm")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constructor-invocation class-name"}},[t._v("Action")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ShowDialog")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("BeginInvoke")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("p",[t._v("那么：")]),t._v(" "),a("ul",[a("li",[t._v("这个时候当前线程（即 "),a("code",[t._v("new LYForm()")]),t._v(" 的线程）需要操作 "),a("code",[t._v("LYForm")]),t._v(" 窗体时，并不需要"),a("code",[t._v("f.Invoke()")])]),t._v(" "),a("li",[t._v("这个时候如果调用 "),a("code",[t._v("f.Invoke()")]),t._v(" ，执行是没有效果的，甚至会抛出异常")])]),t._v(" "),a("h2",{attrs:{id:"子线程如何控制ui"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#子线程如何控制ui"}},[t._v("#")]),t._v(" 子线程如何控制UI")]),t._v(" "),a("p",[t._v("如果子线程中需要访问到 UI ：")]),t._v(" "),a("ul",[a("li",[t._v("则使用 "),a("code",[t._v("Controls.Invoke")]),t._v(" 或者 "),a("code",[t._v("Controls.BeginInvoke")])]),t._v(" "),a("li",[t._v("从而，"),a("code",[t._v("Invoke")]),t._v(" 或 "),a("code",[t._v("BeginInvoke")]),t._v(" 会调度给 UI 所属的线程来执行")])]),t._v(" "),a("p",[t._v("例如，对于某个FORM：")]),t._v(" "),a("ul",[a("li",[t._v("可以 "),a("code",[t._v("this.Invoke")])]),t._v(" "),a("li",[t._v("也可以 "),a("code",[t._v("this.button1.Invoke")])])]),t._v(" "),a("h2",{attrs:{id:"如何判断是子线程控制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何判断是子线程控制"}},[t._v("#")]),t._v(" 如何判断是子线程控制")]),t._v(" "),a("p",[t._v("方法：")]),t._v(" "),a("div",{staticClass:"language-csharp line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-csharp"}},[a("code",[t._v("Controls"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("InvokeRequired\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("可以判断方法的调用是从主线程发起的，还是子线程发起的。")]),t._v(" "),a("h2",{attrs:{id:"何为主线程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#何为主线程"}},[t._v("#")]),t._v(" 何为主线程")]),t._v(" "),a("ul",[a("li",[t._v("主线程是为 FORM 窗体进行消息循环的线程")]),t._v(" "),a("li",[t._v("一个 WINFORM 程序启动时，会自动建立一个消息循环的线程，在该主线程中创建的所有的 FORM 都使用这个消息循环")]),t._v(" "),a("li",[t._v("如果在子线程中进行 "),a("code",[t._v("ShowDialog()")]),t._v(" ，则该子线程就成为该 FORM 的消息循环线程；")]),t._v(" "),a("li",[t._v("注意，"),a("code",[t._v("Form.Show()")]),t._v(" 是不会建立消息循环的")])]),t._v(" "),a("h2",{attrs:{id:"窗体的消息响应"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#窗体的消息响应"}},[t._v("#")]),t._v(" 窗体的消息响应")]),t._v(" "),a("blockquote",[a("p",[t._v("窗体自身的事件(例如鼠标点击/按钮点击等)")])]),t._v(" "),a("ul",[a("li",[t._v("由窗体的消息循环线程处理")]),t._v(" "),a("li",[t._v("因此窗体自身的事件响应函数也是由自身的消息循环线程来调用")]),t._v(" "),a("li",[t._v("所以，窗体自身的事件响应函数不必考虑跨线程访问 UI 的问题")])]),t._v(" "),a("blockquote",[a("p",[t._v("如果窗体的某些 UI 处理函数被外部调用")])]),t._v(" "),a("ul",[a("li",[t._v("则这些函数被调用时，并不清楚是窗体自身的消息循环发起，还是外部跨线程的调用发起")]),t._v(" "),a("li",[t._v("此时，就需要使用 "),a("code",[t._v("Controls.InvokeRequired")]),t._v(" 来判断，并对应的使用 "),a("code",[t._v("Controls.Invoke")]),t._v(" 或 "),a("code",[t._v("Controls.BeginInvoke")]),t._v(" 来进行 UI 访问")])]),t._v(" "),a("h2",{attrs:{id:"陷阱"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#陷阱"}},[t._v("#")]),t._v(" 陷阱")]),t._v(" "),a("p",[t._v("如果 FORM 使用了托盘，则需要注意：")]),t._v(" "),a("ul",[a("li",[t._v("托盘的事件（例如鼠标右键点击、托盘菜单响应等）总是由总进程的主线程来响应的")]),t._v(" "),a("li",[t._v("因此，如果 FORM 不是在总进程的主线程中创建的，则托盘事件是触发不到的，但是窗体自身的事件可以被捕获和触发")]),t._v(" "),a("li",[t._v("所以，如果 FORM 使用了托盘，则 FORM 必须在总进程的主线程中创建")])]),t._v(" "),a("h2",{attrs:{id:"进阶"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#进阶"}},[t._v("#")]),t._v(" 进阶")]),t._v(" "),a("blockquote",[a("p",[t._v("窗体如何响应用户的界面操作？")])]),t._v(" "),a("p",[t._v("原理：")]),t._v(" "),a("ul",[a("li",[t._v("窗体创建后，可以有按钮点击、界面拖动等用户控制行为，这些行为都以消息的形式放入窗体的消息队列中")]),t._v(" "),a("li",[t._v("窗体自身的消息循环线程会不断的从消息队列里取出消息，并调用对应的消息处理函数进行处理")]),t._v(" "),a("li",[t._v("一个消息处理完毕后，接着处理消息队列里的下一个消息")])]),t._v(" "),a("p",[t._v("举例：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("WINFORM 窗体上放置一个 BUTTON ，设计时双击 BUTTON ，即可为该 BUTTON 的点击事件编写处理函数 "),a("code",[t._v("F")])])]),t._v(" "),a("li",[a("p",[t._v("因此，该窗体运行时，点击 BUTTON ，"),a("code",[t._v("F")]),t._v(" 被执行，而这个过程真正的行为是：")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("首先，BUTTON 被点击，产生 CLICK 事件")])]),t._v(" "),a("li",[a("p",[t._v("其次，该 CLICK 事件被放入消息队列中")])]),t._v(" "),a("li",[a("p",[t._v("最后，消息循环线程取出该 CLICK 事件，并调用对应的处理函数 "),a("code",[t._v("F")])])]),t._v(" "),a("li",[a("p",[t._v("所以，这个过程因为太快，给人感觉像是按钮按下后直接调用了一个 UI 函数一样")])])])])]),t._v(" "),a("blockquote",[a("p",[t._v("为何耗时的界面处理函数会导致界面失去响应？")])]),t._v(" "),a("ul",[a("li",[t._v("消息线程是串行的处理队列中的消息")]),t._v(" "),a("li",[t._v("消息线程在调用消息处理函数未返回时，队列中的其它消息不会被处理")]),t._v(" "),a("li",[t._v("因此，当一个消息处理函数时间较长时，在未返回的情况下，点击界面另一个按钮，则按钮 CLICK 事件被放入消息队列")]),t._v(" "),a("li",[t._v("但是按钮 CLICK 事件一直未被处理，于是窗体一直处于等待状态，直到按钮 CLICK 事件被处理")]),t._v(" "),a("li",[t._v("因此，就看到界面失去响应的现象")])]),t._v(" "),a("blockquote",[a("p",[t._v("为何 .NET 中不允许跨线程访问 UI ？")])]),t._v(" "),a("ul",[a("li",[t._v("跨线程操作 UI 时，.NET 会抛出异常，不允许跨线程访问，认为不安全")]),t._v(" "),a("li",[t._v("而其实这是最基本的线程安全原理，好比多个线程同时访问一个对象一样，可能带来并发错误")]),t._v(" "),a("li",[t._v("因此 .NET 希望只使用一个线程，串行地依此处理 UI 控制请求，从而避免并发问题")])]),t._v(" "),a("blockquote",[a("p",[t._v(".NET 跨线程控制 UI 的原理？")])]),t._v(" "),a("ul",[a("li",[t._v("WIN32 时代，解决多线程并发的最直观思路，就是将来自五湖四海的请求统一扔到一个队列中，然后用一个线程串行的从队列中取出请求并处理，所以，归根结底还是生产者消费者这个经典模式")]),t._v(" "),a("li",[t._v("所以，所谓的 "),a("code",[t._v("Controls.Invoke")]),t._v(" 看似很神奇的就解决了跨线程 UI 访问问题，其实本质上，该函数就是做了一个「将 UI 访问的请求放到窗体的消息循环队列中并等待直到被处理」这个动作，而 "),a("code",[t._v("BeginInvoke")]),t._v(" 则只是将请求放入队列，不等待执行")]),t._v(" "),a("li",[t._v("大道至简，不管是简陋的 WIN32 时代，还是华丽的 .NET 时代，甚至现在时髦的 WPF 时代，都是基于最根本的生产者消费者这个经典原理")])]),t._v(" "),a("blockquote",[a("p",[t._v("WIN32 窗体的跨线程控制 UI 呢？")])]),t._v(" "),a("ul",[a("li",[t._v("WIN32 的窗体 UI 控制也是一样的原理，有自己的消息循环线程，串行依次处理 UI 消息")]),t._v(" "),a("li",[t._v("但是，WIN32 的窗体并未像 .NET 一样强行限制了跨线程的 UI 访问，但并不是说不存在并发问题，而是将并发控制过程交给程序员自己保证")]),t._v(" "),a("li",[t._v("WIN32 的窗体里，其实一直都有类似 .NET 的 "),a("code",[t._v("Controls.Invoke")]),t._v(" ，也就是 "),a("code",[t._v("SendMessage")]),t._v(" 和 "),a("code",[t._v("PostMessage")]),t._v(" ，分别对应 .NET 里的 "),a("code",[t._v("Controls.Invoke")]),t._v(" 和 "),a("code",[t._v("Controls.BeginInvoke")]),t._v(" ，众里寻他千百度，暮然回首那人却在灯火阑珊处")])]),t._v(" "),a("blockquote",[a("p",[t._v("山高月小，水落石出")])]),t._v(" "),a("ul",[a("li",[t._v("一直接受着 WIN32 的各种熏陶，一直坚信，所谓的线程其实就是一个方法的执行过程而已，方法执行完了，线程也就完毕了")]),t._v(" "),a("li",[t._v("但是 .NET 的 "),a("code",[t._v("Control.Invoke")]),t._v(" 方法的注释是「让主线程来执行对应的 UI 请求」，这个注释实在太时髦了，让人一度迷茫，难道 .NET 里这个强大的 UI 主线程在执行过程中还可以换一个线程方法么？甚至一度求证异步 DELEGATE 、线程、线程池，发现不管怎么变花招，本质都是开启一个线程去执行一个方法而已")]),t._v(" "),a("li",[t._v("所以，线程是一种理论，理论模型决定了功能，而不会因为语言和语法的不同而导致功能的超越")]),t._v(" "),a("li",[t._v("看着强大的 "),a("code",[t._v("Controls.Invoke")]),t._v(" ，一度以为真的可以让 UI 处理方法穿越般的跑到主线程中去执行，甚至纳闷为何 WIN32 API 就没这么强大的功能？也差点鄙视了自己「自行建立一个请求队列，将多个线程的请求放到队列中，并由一个唯一的线程依次处理请求」的想法，其实自己这个想法一直都是对的，只是 .NET 和 WIN32 都已经做好了，就是消息队列，只是自己以前理解不深刻而已")])]),t._v(" "),a("h2",{attrs:{id:"错误举例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#错误举例"}},[t._v("#")]),t._v(" 错误举例")]),t._v(" "),a("blockquote",[a("p",[t._v("忠告：不管是用户界面操作所触发，还是子线程用 "),a("code",[t._v("Controls.Invoke")]),t._v(" 来触发，这些操作最后都是放到界面消息队列里，依次串行被处理的，因此要小心出现死锁的情况。")])]),t._v(" "),a("p",[t._v("例如，有 A 线程，在循环访问界面：")]),t._v(" "),a("div",{staticClass:"language-csharp line-numbers-mode"},[a("div",{staticClass:"highlight-lines"},[a("br"),a("br"),a("br"),a("br"),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("br"),a("br"),a("br"),a("br")]),a("pre",{pre:!0,attrs:{class:"language-csharp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constructor-invocation class-name"}},[t._v("Action")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("SimFuncRun "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Invoke")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constructor-invocation class-name"}},[t._v("Action")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Text "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"XXX"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("SimFunEnd "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("BeginInvoke")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br")])]),a("p",[t._v("同时，有 B 按钮，点击时等待 A 线程结束：")]),t._v(" "),a("div",{staticClass:"language-csharp line-numbers-mode"},[a("div",{staticClass:"highlight-lines"},[a("br"),a("div",{staticClass:"highlighted"},[t._v(" ")]),a("br"),a("br"),a("br"),a("br")]),a("pre",{pre:!0,attrs:{class:"language-csharp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("SimFuncRun "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("SimFunEnd "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tThread"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Sleep")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("p",[t._v("则上面的代码必然导致死锁：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("因为 B 按钮点击时，等待 A 线程停止")])]),t._v(" "),a("li",[a("p",[t._v("但事实上，A 线程刚好正在访问界面")])]),t._v(" "),a("li",[a("p",[t._v("然而，A 线程的操作和 B 按钮点击的操作都被放到消息队列中，依次排队执行")])]),t._v(" "),a("li",[a("p",[t._v("所以，在 B 按钮点击的操作未结束之前，A 线程的操作是不会被执行的，从而 A 线程无法被结束")])])]),t._v(" "),a("p",[t._v("针对该例子，有多种解决办法，例如：")]),t._v(" "),a("ol",[a("li",[t._v("在 B 按钮点击时，只设置 A 线程的停止标记，但不等待 A 线程结束")]),t._v(" "),a("li",[t._v("为了界面控制的严谨性，在 A 线程停止之前，不允许再次点击 B 按钮，则可以在 B 按钮点击时，先将 B 按钮禁用，并设置 A 线程的停止标记，然后立即返回")]),t._v(" "),a("li",[t._v("在 A 线程中，执行结束时，将 B 按钮启用")])])])}),[],!1,null,null,null);s.default=e.exports}}]);