(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{547:function(s,t,a){"use strict";a.r(t);var n=a(27),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"_3-3-函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-函数"}},[s._v("#")]),s._v(" 3.3. 函数")]),s._v(" "),a("p",[s._v("先举一个函数的例子：")]),s._v(" "),a("div",{staticClass:"language-rust line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fn")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("plus_one")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" i32"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("->")]),s._v(" i32 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    x "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("后续分别讲解函数相关的各项内容：")]),s._v(" "),a("ol",[a("li",[s._v("函数定义")]),s._v(" "),a("li",[s._v("函数名称")]),s._v(" "),a("li",[s._v("函数参数")]),s._v(" "),a("li",[s._v("函数体")]),s._v(" "),a("li",[s._v("函数返回值")])]),s._v(" "),a("h2",{attrs:{id:"函数定义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数定义"}},[s._v("#")]),s._v(" 函数定义")]),s._v(" "),a("ul",[a("li",[s._v("函数定义的关键字是 fn")]),s._v(" "),a("li",[s._v("Rust并不关心函数在哪里定义，例如函数在调用者之前或之后定义都行，只要能被编译器识别即可")]),s._v(" "),a("li",[s._v("main函数是大多数程序的入口")])]),s._v(" "),a("h2",{attrs:{id:"函数名称"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数名称"}},[s._v("#")]),s._v(" 函数名称")]),s._v(" "),a("ul",[a("li",[s._v("对于函数名称，Rust的编码风格是snake case")]),s._v(" "),a("li",[s._v("即所有单词使用小写并通过下划线来分隔")]),s._v(" "),a("li",[s._v("例如plus_one")])]),s._v(" "),a("h2",{attrs:{id:"函数参数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数参数"}},[s._v("#")]),s._v(" 函数参数")]),s._v(" "),a("ul",[a("li",[s._v("函数定义时的参数叫形参parameter")]),s._v(" "),a("li",[s._v("函数调用时传入的参数叫实参argument")]),s._v(" "),a("li",[s._v("如果函数有参数，必须为每个参数都指定确切的数据类型，从而在使用函数的时候，编译器确切的知道要调用的函数是哪一个")])]),s._v(" "),a("h2",{attrs:{id:"函数体"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数体"}},[s._v("#")]),s._v(" 函数体")]),s._v(" "),a("p",[s._v("函数体说明：")]),s._v(" "),a("ol",[a("li",[s._v("函数体由一系列statement组成，并可能由expression结束，而这个结束的expression就是函数的返回值")]),s._v(" "),a("li",[s._v("Rust是基于expression的语言，这是Rust与其它语言的一个很重要的区别")])]),s._v(" "),a("p",[s._v("statement和expression的说明：")]),s._v(" "),a("ul",[a("li",[s._v("它们都是一些语句")]),s._v(" "),a("li",[s._v("statement执行一些动作但不会得到一个可返回的值")]),s._v(" "),a("li",[s._v("expression会得到一个可返回的结果值")]),s._v(" "),a("li",[s._v("statement是以分号结束的，但expression没有结尾的分号")])]),s._v(" "),a("p",[s._v("下面的例子都是statement：")]),s._v(" "),a("ul",[a("li",[s._v("let语句，例如 let x = 6;")]),s._v(" "),a("li",[s._v("函数的定义，即函数名，参数等")])]),s._v(" "),a("p",[s._v("下面的例子都是expression：")]),s._v(" "),a("ul",[a("li",[s._v("5+6")]),s._v(" "),a("li",[s._v("调用一个方法，例如plus_one()")]),s._v(" "),a("li",[s._v("调用一个宏，例如println!")]),s._v(" "),a("li",[s._v("通过 {} 创建的新的Scope")])]),s._v(" "),a("p",[s._v("statement和expression的关系：")]),s._v(" "),a("ol",[a("li",[s._v("expression可以是statement的一部分")]),s._v(" "),a("li",[s._v("例如let x = 6; 是statement，但其中 6 是statement")]),s._v(" "),a("li",[s._v("又如let x = 5+6; 是statement，但其中 5+6 是statement")])]),s._v(" "),a("p",[s._v("举例：")]),s._v(" "),a("div",{staticClass:"language-rust line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" y "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("例子剖析：")]),s._v(" "),a("ul",[a("li",[s._v("该代码编译报错")]),s._v(" "),a("li",[s._v("因为 let y=6 是statement")]),s._v(" "),a("li",[s._v("而statement不会有可返回的值")]),s._v(" "),a("li",[s._v("所以没有可用的值来绑定给变量 x")]),s._v(" "),a("li",[s._v("但C语言是支持这样的语法的，例如x = y = 6;")])]),s._v(" "),a("p",[s._v("举例：")]),s._v(" "),a("div",{staticClass:"language-rust line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" y "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    x "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("例子剖析：")]),s._v(" "),a("ul",[a("li",[s._v("该代码能够编译成功")]),s._v(" "),a("li",[s._v("let y =xxxx；该语句需要有分号结尾，因为这是statement，所以该语句的 } 之后需要有分号")]),s._v(" "),a("li",[s._v("而y的赋值，也就是绑定到变量 y 的内容是expression，因此可以是5，或者5+6，或者通过 {} 得到的值")]),s._v(" "),a("li",[s._v("在该例子中，绑定到变量 y 的内容是通过 {} 来得到的")]),s._v(" "),a("li",[s._v("因此， {} 内 x+1 不能有分号结尾，否则就是statement，进而 {} 就无法得到可用的值来绑定给变量 y")])]),s._v(" "),a("h2",{attrs:{id:"函数返回值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数返回值"}},[s._v("#")]),s._v(" 函数返回值")]),s._v(" "),a("p",[s._v("返回值的说明：")]),s._v(" "),a("ol",[a("li",[s._v("返回值不需要名称")]),s._v(" "),a("li",[s._v("但需要明确返回值的类型")]),s._v(" "),a("li",[s._v("语法是 fn test() -> DataType")])]),s._v(" "),a("p",[s._v("Rust中返回值如何确定：")]),s._v(" "),a("ul",[a("li",[s._v("在Rust中，返回值等同于函数的最后一个expression的值")]),s._v(" "),a("li",[s._v("==可以在函数中提前通过return关键字来确定返回结果==")]),s._v(" "),a("li",[s._v("但大多数程序的函数都是隐式的返回最后一个expression")])]),s._v(" "),a("p",[s._v("举例：")]),s._v(" "),a("div",{staticClass:"language-rust line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fn")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("five")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("->")]),s._v(" i32 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("例子剖析：")]),s._v(" "),a("ul",[a("li",[s._v("该函数没有参数")]),s._v(" "),a("li",[s._v("但是有返回值，类型是 i32")]),s._v(" "),a("li",[s._v("该函数通过 expression 得到返回值，也就是 5，该语句不能用分号结尾")])]),s._v(" "),a("p",[s._v("举例：")]),s._v(" "),a("div",{staticClass:"language-rust line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fn")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("plus_one")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("println!")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"The value of x is: {}"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fn")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("plus_one")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" i32"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("->")]),s._v(" i32 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    x "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("例子剖析：")]),s._v(" "),a("ul",[a("li",[s._v("该函数有参数，也有返回值")]),s._v(" "),a("li",[s._v("该函数通过 expression 得到返回值，也就是 x+1，该语句不能用分号结尾")]),s._v(" "),a("li",[s._v("如果 x+1 语句加上分号，就是 statement，此时编译器报错，认为返回的是()，即一个空的tuple，而不是 i32 返回值")]),s._v(" "),a("li",[s._v("从这个例子中可知，如果一个函数没有返回值，则返回的就是 ()，即空的tuple，类似于C语言中的 void")])])])}),[],!1,null,null,null);t.default=e.exports}}]);