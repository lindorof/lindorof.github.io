(window.webpackJsonp=window.webpackJsonp||[]).push([[85],{477:function(t,s,a){"use strict";a.r(s);var n=a(27),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"_17-2-trait-对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_17-2-trait-对象"}},[t._v("#")]),t._v(" 17.2. Trait 对象")]),t._v(" "),a("h2",{attrs:{id:"场景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#场景"}},[t._v("#")]),t._v(" 场景")]),t._v(" "),a("ul",[a("li",[t._v("为了讲解本节内容，需要先基于一个场景：\n"),a("ul",[a("li",[t._v("考虑一个 GUI 库中的组件")]),t._v(" "),a("li",[t._v("这些组件可能有 "),a("code",[t._v("Button")]),t._v(" ，"),a("code",[t._v("TextField")]),t._v(" 等")]),t._v(" "),a("li",[t._v("甚至该 GUI 库的使用者会自行扩充组件，例如 "),a("code",[t._v("Image")]),t._v(" ，"),a("code",[t._v("SelectBox")]),t._v(" 等")]),t._v(" "),a("li",[t._v("但是，虽然这些组件的功能不同，但它们都有一个 "),a("code",[t._v("draw")]),t._v(" 方法用来进行绘制，虽然每个组件的绘制行为可能不同")])])]),t._v(" "),a("li",[t._v("那么，在 C++ 中，我们可以这么做：\n"),a("ul",[a("li",[t._v("定义一个 "),a("code",[t._v("Component")]),t._v(" 纯虚类")]),t._v(" "),a("li",[t._v("该纯虚类中有一个 "),a("code",[t._v("daw")]),t._v(" 虚方法")]),t._v(" "),a("li",[t._v("而各个组件，诸如 "),a("code",[t._v("Button")]),t._v(" ，"),a("code",[t._v("TextField")]),t._v(" 等，都继承 "),a("code",[t._v("Component")]),t._v(" 类，并提供自己的 "),a("code",[t._v("draw")]),t._v(" 实现")]),t._v(" "),a("li",[t._v("然后，我们可以使用 "),a("code",[t._v("Component*")]),t._v(" 类型的参数，这个参数可以接收诸如 "),a("code",[t._v("Button")]),t._v(" ，"),a("code",[t._v("TextField")]),t._v(" 等对象")])])]),t._v(" "),a("li",[t._v("但 rust 的做法跟 C++ 不一样，因为 rust 不是这样实现继承的：\n"),a("ul",[a("li",[t._v("对于 "),a("code",[t._v("Component")]),t._v(" ，rust 可以定义为 trait")]),t._v(" "),a("li",[t._v("对于 "),a("code",[t._v("Component*")]),t._v(" 参数，rust 可以使用泛型参数，但在编译期就进行了参数演绎，无法实现多态")]),t._v(" "),a("li",[t._v("所以，rust 提供了 "),a("em",[a("strong",[t._v("trait 对象")])]),t._v("（"),a("em",[a("strong",[t._v("trait object")])]),t._v("），用来实现多态")]),t._v(" "),a("li",[t._v("下面逐步来讲解 rust 的方式")])])])]),t._v(" "),a("h2",{attrs:{id:"实现-trait"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实现-trait"}},[t._v("#")]),t._v(" 实现 trait")]),t._v(" "),a("blockquote",[a("p",[t._v("先定义 trait")])]),t._v(" "),a("div",{staticClass:"language-rust line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// trait 名称是 Component")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("trait")]),t._v(" Component "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 该 trait 有 draw 方法")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("draw")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("blockquote",[a("p",[t._v("定义组件 Button")])]),t._v(" "),a("div",{staticClass:"language-rust line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" Button "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Button 有长宽等数据")]),t._v("\n\twidth"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" u32"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\theight"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" u32"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 为 Button 实现 Component Trait")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("impl")]),t._v(" Component "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" Button "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("draw")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br")])]),a("blockquote",[a("p",[t._v("定义组件 TextField")])]),t._v(" "),a("div",{staticClass:"language-rust line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" TextField "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// TextField 有文本内容等数据")]),t._v("\n\ttxt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" String"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 为 TextField 实现 Component Trait")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("impl")]),t._v(" Component "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" TextField "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("draw")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br")])]),a("h2",{attrs:{id:"使用泛型参数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用泛型参数"}},[t._v("#")]),t._v(" 使用泛型参数")]),t._v(" "),a("p",[t._v("在 Chapter10 中讲解过泛型，那么使用泛型参数的代码是这样的：")]),t._v(" "),a("div",{staticClass:"language-rust line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 形参 t 是泛型的")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 并要求实参实现了 Component Trait ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" comp_draw"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("T"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Component"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" T"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("draw")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("p",[t._v("测试代码：")]),t._v(" "),a("div",{staticClass:"language-rust line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 创建 Button 实例 b")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Button "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\twidth"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t\theight"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 传递实参 b")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("comp_draw")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 创建 TextField 实例 t")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" t "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" TextField "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\ttxt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" String"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("from")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"TextField1"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 传递实参 t")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("comp_draw")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br")])]),a("p",[t._v("剖析：")]),t._v(" "),a("ul",[a("li",[t._v("上述代码通过泛型参数，可以接收所有实现了 "),a("code",[t._v("Component")]),t._v(" 这个 trait 的实参")]),t._v(" "),a("li",[t._v("但本质上，泛型参数是在 "),a("em",[a("strong",[t._v("编译期")])]),t._v(" 进行演绎的，详情可参考 Chapter10")]),t._v(" "),a("li",[t._v("也就是说，上面的例子里，只定义了一次 "),a("code",[t._v("comp_draw")]),t._v(" 函数，并在调用 "),a("code",[t._v("comp_draw")]),t._v(" 函数时，传递了 "),a("code",[t._v("Button")]),t._v(" 和 "),a("code",[t._v("TextField")]),t._v(" 两种类型的实参")]),t._v(" "),a("li",[t._v("但本质上，rust 编译器会自动演绎为两个 "),a("code",[t._v("comp_draw")]),t._v(" 函数，例如可能是这样的：\n"),a("ul",[a("li",[a("code",[t._v("comp_draw_1(b: Button)")])]),t._v(" "),a("li",[a("code",[t._v("comp_draw_1(t: TextField)")])])])]),t._v(" "),a("li",[t._v("所以，从本质上说，这种实现方式并不是多态")])]),t._v(" "),a("h2",{attrs:{id:"trait-object"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#trait-object"}},[t._v("#")]),t._v(" "),a("em",[t._v("trait object")])]),t._v(" "),a("h3",{attrs:{id:"概述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[t._v("#")]),t._v(" 概述")]),t._v(" "),a("p",[t._v("用途：")]),t._v(" "),a("ul",[a("li",[t._v("泛型参数的意义是，在 "),a("em",[a("strong",[t._v("编译期")])]),t._v(" 抽象一种符合 trait 规范的数据类型")]),t._v(" "),a("li",[t._v("但是，在 "),a("em",[a("strong",[t._v("运行时")])]),t._v(" ，对某种数据类型来说，实例化之后叫做 "),a("em",[a("strong",[t._v("实例")])]),t._v(" 或者 "),a("em",[a("strong",[t._v("对象")])])]),t._v(" "),a("li",[t._v("所以我们希望达成另一点：在 "),a("em",[a("strong",[t._v("运行时")])]),t._v(" 抽象一种符合 trait 规范的 "),a("em",[a("strong",[t._v("对象")])]),t._v(" ，这就是 "),a("em",[a("strong",[t._v("trait object")])])])]),t._v(" "),a("p",[t._v("语法：")]),t._v(" "),a("ul",[a("li",[t._v("使用 "),a("code",[t._v("dyn")]),t._v(" 关键字，后接 trait 名称，例如 "),a("code",[t._v("dyn Component")])]),t._v(" "),a("li",[t._v("但由于编译器无法知道该对象的大小，所以只能使用 "),a("code",[t._v("&")]),t._v(" 或 "),a("code",[t._v("Box")]),t._v(" ，原因可以理解，因为符合该 trait 规范的对象大小是千差万别的，编译器无法知道，细节会在 Chapter19 讲解")]),t._v(" "),a("li",[t._v("所以，语法可能是 "),a("code",[t._v("&dyn Component")]),t._v(" ，或者 "),a("code",[t._v("Box<dyn Component>")])]),t._v(" "),a("li",[t._v("总之，基于 "),a("code",[t._v("dyn")]),t._v(" 关键字，然后必须用指针来存储 trait object")]),t._v(" "),a("li",[t._v("因此，诸如 "),a("code",[t._v("Box<dyn Component>")]),t._v(" 这样的语法就是 trait object ，从而就可以实现多态，类似与 C++ 的 "),a("code",[t._v("Component*")])])]),t._v(" "),a("h3",{attrs:{id:"代码改进"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#代码改进"}},[t._v("#")]),t._v(" 代码改进")]),t._v(" "),a("p",[t._v("对上面使用泛型参数的代码进行改进，但会稍微复杂一点：")]),t._v(" "),a("div",{staticClass:"language-rust line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" Screen "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tcomps"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Vec"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("Box"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("dyn")]),t._v(" Component"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("impl")]),t._v(" Screen "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("run")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" c "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("comps "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\tc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("draw")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br")])]),a("p",[t._v("剖析：")]),t._v(" "),a("ul",[a("li",[t._v("上面定义一个 struct ，其中的 "),a("code",[t._v("comps")]),t._v(" 用 "),a("code",[t._v("Vec")]),t._v(" 来存储对象列表")]),t._v(" "),a("li",[t._v("而 "),a("code",[t._v("comps")]),t._v(" 中存储的这些对象符合 "),a("code",[t._v("Component")]),t._v(" 这个 trait 规范")]),t._v(" "),a("li",[t._v("然后为 "),a("code",[t._v("Screen")]),t._v(" 实现方法，调用 "),a("code",[t._v("comps")]),t._v(" 中的各个对象的 "),a("code",[t._v("draw")]),t._v(" 方法")])]),t._v(" "),a("p",[t._v("测试代码：")]),t._v(" "),a("div",{staticClass:"language-rust line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" s "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Screen "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\tcomps"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("vec!")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n\t\t\tBox"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("new")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Button "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\t\twidth"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t\t\t\theight"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t\t\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t\t\tBox"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("new")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("TextField "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\t\ttxt"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" String"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("from")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"TextField1"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t\t\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\ts"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("run")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br")])]),a("p",[t._v("由此可见：")]),t._v(" "),a("ul",[a("li",[t._v("上述代码考虑的是运行时的对象")]),t._v(" "),a("li",[t._v("所存储的也是符合某种 trait 规范的对象")]),t._v(" "),a("li",[t._v("且上述代码就是多态的例子")])]),t._v(" "),a("h3",{attrs:{id:"类型检查"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类型检查"}},[t._v("#")]),t._v(" 类型检查")]),t._v(" "),a("ul",[a("li",[t._v("rust 的类型系统能够确保 trait 对象一定符合 trait 规范")]),t._v(" "),a("li",[t._v("而且是在编译时进行检查，而不是运行时")])]),t._v(" "),a("div",{staticClass:"language-rust line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" s "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Screen "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\tcomps"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("vec!")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 编译正确")]),t._v("\n\t\t\tBox"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("new")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Button "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\t\twidth"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t\t\t\theight"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t\t\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 编译错误")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 因为 String 没有实现 Component 这个 trait")]),t._v("\n\t\t\tBox"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("new")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("String"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("from")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"error"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\ts"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("run")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br")])]),a("p",[t._v("编译错误提示如下：")]),t._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("Box::new"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("String::from"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"error"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("))")]),t._v(",\n^^^the trait "),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")]),t._v("Component"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")])]),t._v(" is not implemented "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")]),t._v("String"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")])]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[t._v("需要注意的是：")]),t._v(" "),a("ul",[a("li",[t._v("rust 编译器会进行类型检查，但要注意所检查的是：实例是否实现了 trait ，而不是检查该实例的具体类型")]),t._v(" "),a("li",[t._v("所以，对于上面的例子，rust 编译器能够检测到 "),a("code",[t._v("String")]),t._v(" 实例没有实现 "),a("code",[t._v("Component")]),t._v(" 这个 trait")]),t._v(" "),a("li",[t._v("同时，一旦符合 trait 规范（例如 "),a("code",[t._v("Button")]),t._v(" 的实例符合 "),a("code",[t._v("Component")]),t._v(" 规范，但 "),a("code",[t._v("String")]),t._v(" 的实例不符合），就会成为一个 trait 对象")]),t._v(" "),a("li",[t._v("而一旦成为 trait 对象之后，rust 就忘记了该实例的真实类型，只记住了该实例所符合的 trait（例如 rust 只关注 "),a("code",[t._v("Button")]),t._v(" 实例实现了 "),a("code",[t._v("Component")]),t._v(" ，而忘记了其真实的类型是 "),a("code",[t._v("Button")]),t._v("）")]),t._v(" "),a("li",[t._v("这一点尤其重要，对理解后续的 "),a("em",[a("strong",[t._v("性能探讨")])]),t._v(" 和 "),a("em",[a("strong",[t._v("对象安全")])]),t._v(" 非常关键")])]),t._v(" "),a("h3",{attrs:{id:"总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),a("ul",[a("li",[a("em",[a("strong",[t._v("trait object")])]),t._v(" 的概念是：只关心该值所能反馈的信息，而不关心该值所属的具体类型")]),t._v(" "),a("li",[t._v("这类似于动态类型语言中的 "),a("em",[a("strong",[t._v("鸭子类型")])]),t._v("（"),a("em",[a("strong",[t._v("duck typing")])]),t._v("）：\n"),a("ul",[a("li",[t._v("如果它 "),a("em",[a("strong",[t._v("走路")])]),t._v(" 像鸭子")]),t._v(" "),a("li",[t._v("那么它 "),a("em",[a("strong",[t._v("就是")])]),t._v(" 鸭子")]),t._v(" "),a("li",[t._v("因为我们只关心 "),a("em",[a("strong",[t._v("走路")])]),t._v(" 这个特性")]),t._v(" "),a("li",[t._v("所以我们可以把一只鸡当做鸭子，因为鸡会走路")]),t._v(" "),a("li",[t._v("但是我们不会把一条鱼当做鸭子，因为鱼不会走路")])])]),t._v(" "),a("li",[t._v("正如上面的多态例子：\n"),a("ul",[a("li",[t._v("rust 不会检查具体的实例是 "),a("code",[t._v("Button")]),t._v(" 还是 "),a("code",[t._v("TextField")])]),t._v(" "),a("li",[t._v("rust 只关注这些实例符合 "),a("code",[t._v("Component")]),t._v(" 特性")]),t._v(" "),a("li",[t._v("而一旦 "),a("code",[t._v("Button")]),t._v(" 实例符合 "),a("code",[t._v("Component")]),t._v(" 特性，则 rust 认为这个 "),a("code",[t._v("Button")]),t._v(" 实例就是 "),a("code",[t._v("Component")]),t._v(" 这只鸭子")])])])]),t._v(" "),a("h2",{attrs:{id:"性能探讨"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#性能探讨"}},[t._v("#")]),t._v(" 性能探讨")]),t._v(" "),a("h3",{attrs:{id:"静态分发"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#静态分发"}},[t._v("#")]),t._v(" 静态分发")]),t._v(" "),a("ul",[a("li",[a("em",[a("strong",[t._v("静态分发")])]),t._v("（"),a("em",[a("strong",[t._v("static dispatch")])]),t._v("）针对于泛型")]),t._v(" "),a("li",[t._v("如 Chapter10 中所讲解的，编译器会针对每种泛型实参进行演绎，最后转换为非泛型的类型、函数、方法")]),t._v(" "),a("li",[t._v("所以，静态分发在编译时进行，也就是说，在编译的时候就知道调用了哪个对象的哪个方法")]),t._v(" "),a("li",[t._v("因此，静态分发不会影响运行时性能，甚至编译器还会有选择的内联方法代码来进行优化")])]),t._v(" "),a("h3",{attrs:{id:"动态分发"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#动态分发"}},[t._v("#")]),t._v(" 动态分发")]),t._v(" "),a("ul",[a("li",[a("em",[a("strong",[t._v("动态分发")])]),t._v("（"),a("em",[a("strong",[t._v("dynamic dispatch")])]),t._v("）针对 trait object")]),t._v(" "),a("li",[t._v("动态分发在运行时进行，因为在编译时无法知道调用了什么方法")]),t._v(" "),a("li",[t._v("所以，针对动态分发，编译器会自动生成一些代码，通过这些代码，在运行时才能确定调用了什么方法")]),t._v(" "),a("li",[t._v("粗略来说，rust 在运行时会使用 trait object 中的指针，来确定所调用到的方法（没有详细研究这种实现机制，但与 C++ 是类似的，可以参看本人 blog 中的 《从内存模型分析 C++ 的面向对象机制》）")]),t._v(" "),a("li",[t._v("因此，动态分发带来了灵活性，但也带来了性能损耗")]),t._v(" "),a("li",[t._v("而且，动态分发也会阻止编译器内联方法代码，从而禁用了一些优化")])]),t._v(" "),a("h2",{attrs:{id:"object-safe"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#object-safe"}},[t._v("#")]),t._v(" "),a("em",[t._v("object safe")])]),t._v(" "),a("h3",{attrs:{id:"规则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#规则"}},[t._v("#")]),t._v(" 规则")]),t._v(" "),a("ul",[a("li",[t._v("只有 "),a("em",[a("strong",[t._v("对象安全")])]),t._v("（"),a("em",[a("strong",[t._v("object safe")])]),t._v("）的 trait ，才能用于 "),a("em",[a("strong",[t._v("trait 对象")])]),t._v("（"),a("em",[a("strong",[t._v("trait object")])]),t._v("）")]),t._v(" "),a("li",[t._v("如果一个 trait 中，所有的方法都满足如下属性，则该 trait 是对象安全的：\n"),a("ol",[a("li",[t._v("返回值类型不是 "),a("code",[t._v("Self")]),t._v(" "),a("ul",[a("li",[t._v("因为 trait 对象关注的是对象本身，而不是对象所属的具体类型")]),t._v(" "),a("li",[t._v("如果 trait 方法返回 "),a("code",[t._v("Self")]),t._v(" ，可是 trait 对象早已忘记了自己的具体类型")]),t._v(" "),a("li",[t._v("所以 trait 方法也就无法知道 "),a("code",[t._v("Self")]),t._v(" 究竟是什么类型，进而也无法使用这种类型")])])]),t._v(" "),a("li",[t._v("方法没有任何泛型参数\n"),a("ul",[a("li",[t._v("如果 trait 方法中有泛型参数，则编译器会根据实参类型，演绎为不同的 trait 方法")]),t._v(" "),a("li",[t._v("这些被编译器所演绎后的 trait 方法，是与具体的类型信息相对应的")]),t._v(" "),a("li",[t._v("可问题是，trait 对象早已忘记了自己的具体类型")]),t._v(" "),a("li",[t._v("所以，面对一个 trait 对象时，rust 无法为该 trait 对象匹配具体的 trait 方法")])])])])])]),t._v(" "),a("h3",{attrs:{id:"举例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#举例"}},[t._v("#")]),t._v(" 举例")]),t._v(" "),a("blockquote",[a("p",[t._v("标准库中 "),a("code",[t._v("Clone")]),t._v(" 这个 trait 不符合对象安全规则")])]),t._v(" "),a("p",[t._v("在 "),a("code",[t._v("Clone")]),t._v(" 这个 trait 里，有一个 "),a("code",[t._v("clone")]),t._v(" 方法，其签名如下：")]),t._v(" "),a("div",{staticClass:"language-rust line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("pub")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("trait")]),t._v(" Clone "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("clone")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("->")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("Self")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("p",[t._v("而 String 实现了 "),a("code",[t._v("Clone")]),t._v(" 这个 trait ：")]),t._v(" "),a("div",{staticClass:"language-rust line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" s1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" String"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("from")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"s1"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" s2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" String"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("clone")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("s1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[t._v("也就是说：")]),t._v(" "),a("ul",[a("li",[t._v("调用 String 的 "),a("code",[t._v("clone")]),t._v(" 方法，返回 "),a("code",[t._v("Self")]),t._v(" ，而 "),a("code",[t._v("Self")]),t._v(" 类型是 String ，也就是得到一个 String 类型的实例")]),t._v(" "),a("li",[t._v("而如果其它类型例如 "),a("code",[t._v("TypeA")]),t._v(" 也实现了 "),a("code",[t._v("Clone")]),t._v(" 这个 trait，那么调用 "),a("code",[t._v("TypeA")]),t._v(" 的 "),a("code",[t._v("clone")]),t._v(" 方法，就会得到一个 "),a("code",[t._v("TypeA")]),t._v(" 类型的实例")]),t._v(" "),a("li",[t._v("所以，"),a("code",[t._v("clone")]),t._v(" 这个 trait 方法所返回的 "),a("code",[t._v("Self")]),t._v(" 类型是可变的，且与 trait 对象所属的类型是一致的，但问题是，trait 对象早已忘记了（也不想知道）自己是什么类型")])]),t._v(" "),a("blockquote",[a("p",[t._v("如果代码违反了对象安全规则，编译器会提示：")])]),t._v(" "),a("div",{staticClass:"language-rust line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("clone_trait")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("dyn")]),t._v(" Clone"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\t\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[t._v("错误提示如下：")]),t._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[t._v("the trait "),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")]),t._v("std::clone::Clone"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("`")])]),t._v(" cannot be made into an object\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("blockquote",[a("p",[t._v("但是，泛型没有这些规则限制：")])]),t._v(" "),a("div",{staticClass:"language-rust line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" clone_trait"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("T"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("Clone"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("T"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("->")]),t._v(" T "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("clone")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" s "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" String"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("::")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("from")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"sth"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println!")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"{:?}"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("clone_trait")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br")])])])}),[],!1,null,null,null);s.default=e.exports}}]);