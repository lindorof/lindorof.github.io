(window.webpackJsonp=window.webpackJsonp||[]).push([[88],{495:function(e,t,s){"use strict";s.r(t);var a=s(27),n=Object(a.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"_18-2-可反驳性-refutability"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_18-2-可反驳性-refutability"}},[e._v("#")]),e._v(" 18.2. 可反驳性 "),s("em",[e._v("Refutability")])]),e._v(" "),s("blockquote",[s("p",[e._v("关于可反驳性")])]),e._v(" "),s("ul",[s("li",[e._v("模式和匹配，就是 EXPRESSION 匹配 PATTERN 的过程")]),e._v(" "),s("li",[e._v("而模式有两种形式，一种是***可反驳***（"),s("em",[s("strong",[e._v("refutable")])]),e._v("），一种是***不可反驳***（"),s("em",[s("strong",[e._v("irrefutable")])]),e._v("）")]),e._v(" "),s("li",[e._v("对于 refutable 模式，表达式可以匹配失败")]),e._v(" "),s("li",[e._v("对于 irrefutable 模式，表达式只能匹配成功")]),e._v(" "),s("li",[e._v("而模式与 rust 的语法本身是相关联的，例如 "),s("code",[e._v("let")]),e._v(" 、"),s("code",[e._v("if let")]),e._v(" 、"),s("code",[e._v("for")]),e._v(" 等语法")]),e._v(" "),s("li",[e._v("而不同语法对模式是有要求的，有的语法只能接受 refutable 模式，有的语法只能接受 irrefutable 模式")]),e._v(" "),s("li",[e._v("比如，"),s("code",[e._v("let")]),e._v(" 语法只能接受 irrefutable 模式，因为必须匹配成功")]),e._v(" "),s("li",[e._v("比如，"),s("code",[e._v("if let")]),e._v(" 语法只应该接受 refutable 模式，因为可以匹配失败")]),e._v(" "),s("li",[e._v("后续的章节会讲解模式的全部语法，根据这些语法，来理解对应模式应当是 refutable 还是 irrefutable")]),e._v(" "),s("li",[e._v("不用担心也不用过多的去深究 refutable 和 irrefutable 的区别，而是熟悉 "),s("em",[s("strong",[e._v("refutability")])]),e._v(" 这个概念，从而在遇到错误的时候，能够知道如何去应对")]),e._v(" "),s("li",[e._v("比较常见的语法："),s("code",[e._v("let")]),e._v(" 、函数参数、"),s("code",[e._v("for")]),e._v(" 这些语法只能接受 irrefutable 模式；"),s("code",[e._v("if let")]),e._v(" 、"),s("code",[e._v("while let")]),e._v(" 这些语法只能接受 refutable 模式")])]),e._v(" "),s("blockquote",[s("p",[e._v("举例："),s("code",[e._v("let")]),e._v(" 只接受 irrefutable 模式")])]),e._v(" "),s("div",{staticClass:"language-rust line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-rust"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("let")]),e._v(" x "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("ul",[s("li",[e._v("此时 "),s("code",[e._v("x")]),e._v(" 是一个 irrefutable 模式")]),e._v(" "),s("li",[e._v("因为此时任何值都能被绑定到 "),s("code",[e._v("x")])])]),e._v(" "),s("blockquote",[s("p",[e._v("举例："),s("code",[e._v("let")]),e._v(" 不能接受 refutable 模式")])]),e._v(" "),s("div",{staticClass:"language-rust line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-rust"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("let")]),e._v(" x "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("Some")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("6")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("let")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("Some")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("y"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br")])]),s("ul",[s("li",[e._v("首先，"),s("code",[e._v("let x = Some(6)")]),e._v(" 匹配成功，此时 "),s("code",[e._v("x")]),e._v(" 的类型被 rust 自动推断为 "),s("code",[e._v("Option<i32>")]),e._v(" ，并将值 "),s("code",[e._v("Some(6)")]),e._v(" 绑定给变量 "),s("code",[e._v("x")])]),e._v(" "),s("li",[e._v("但是，"),s("code",[e._v("let Some(y) = x")]),e._v(" 会编译失败，因为此时 "),s("code",[e._v("Some(y)")]),e._v(" 是一个 refutable 模式，可能匹配到 "),s("code",[e._v("Some(value)")]),e._v(" ，也可能匹配到 "),s("code",[e._v("None")]),e._v(" ，即使我们知道表达式 "),s("code",[e._v("x")]),e._v(" 并不是 "),s("code",[e._v("None")]),e._v(" ，而 "),s("code",[e._v("let")]),e._v(" 语法只能接受 irrefutable 模式，因此编译失败")]),e._v(" "),s("li",[e._v("编译器错误提示：")])]),e._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[e._v("error"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("[")]),e._v("E0005"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("]")]),e._v(": refutable pattern "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("in")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("local")]),e._v(" binding: "),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("`")]),e._v("None"),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("`")])]),e._v(" not covered\n"),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("let")]),e._v(" Some"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("y"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" x"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n    ^^^^^^^ pattern "),s("span",{pre:!0,attrs:{class:"token variable"}},[s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("`")]),e._v("None"),s("span",{pre:!0,attrs:{class:"token variable"}},[e._v("`")])]),e._v(" not covered\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br")])]),s("blockquote",[s("p",[e._v("举例："),s("code",[e._v("if let")]),e._v(" 接受 refutable 模式")])]),e._v(" "),s("div",{staticClass:"language-rust line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-rust"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("let")]),e._v(" x "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("Some")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("6")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("if")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("let")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("Some")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("y"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" x "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("        \n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br")])]),s("ul",[s("li",[e._v("这是对上一个例子的修改，能够成功编译")]),e._v(" "),s("li",[e._v("此时 "),s("code",[e._v("Some(y)")]),e._v(" 是 refutable 模式，若 "),s("code",[e._v("x")]),e._v(" 的值是 "),s("code",[e._v("Some(value)")]),e._v(" ，则匹配成功，"),s("code",[e._v("if let")]),e._v(" 成立；若 "),s("code",[e._v("x")]),e._v(" 的值是 "),s("code",[e._v("None")]),e._v(" ，则匹配失败，"),s("code",[e._v("if let")]),e._v(" 不成立")])]),e._v(" "),s("blockquote",[s("p",[e._v("举例："),s("code",[e._v("if let")]),e._v(" 不应当使用 irrefutable 模式")])]),e._v(" "),s("div",{staticClass:"language-rust line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-rust"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("if")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("let")]),e._v(" x "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("5")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br")])]),s("ul",[s("li",[e._v("此时 "),s("code",[e._v("x")]),e._v(" 是一个 irrefutable 模式，总是会匹配成功")]),e._v(" "),s("li",[e._v("因此能够编译成功，但编译器会给出警告，告知不应当将一个 irrefutable 模式用到 "),s("code",[e._v("if let")]),e._v(" 中")]),e._v(" "),s("li",[e._v("编译器警告提示：")])]),e._v(" "),s("div",{staticClass:"language-shell line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[e._v("warning: irrefutable if-let pattern\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("if")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("let")]),e._v(" x "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("5")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\nnote: "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("#[warn(irrefutable_let_patterns)] on by default")]),e._v("\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br")])])])}),[],!1,null,null,null);t.default=n.exports}}]);