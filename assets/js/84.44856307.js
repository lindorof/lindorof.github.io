(window.webpackJsonp=window.webpackJsonp||[]).push([[84],{497:function(t,s,a){"use strict";a.r(s);var n=a(27),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"_17-1-对象特征"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_17-1-对象特征"}},[t._v("#")]),t._v(" 17.1. 对象特征")]),t._v(" "),a("p",[t._v("本章内容：")]),t._v(" "),a("ul",[a("li",[t._v("rust 被很多编程范式所影响，包括面向对象编程，还有 Chapter13 讲到的函数式编程")]),t._v(" "),a("li",[t._v("面向对象的特性一般是："),a("em",[a("strong",[t._v("对象")])]),t._v("、"),a("em",[a("strong",[t._v("封装")])]),t._v("、"),a("em",[a("strong",[t._v("继承")])]),t._v(" ，本章会讲解这些概念，以及 rust 如何支持它们")])]),t._v(" "),a("h2",{attrs:{id:"对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对象"}},[t._v("#")]),t._v(" 对象")]),t._v(" "),a("p",[t._v("由 Erich Gamma、Richard Helm、Ralph Johnson、John Vlissides 编写的书《"),a("em",[t._v("Design Patterns: Elements of Reusable Object-Oriented Software")]),t._v("》，被俗称为 "),a("code",[t._v("The Gang of Four")]),t._v(" ，这样定义面向对象编程：")]),t._v(" "),a("blockquote",[a("p",[a("em",[t._v("Object-oriented programs are made up of objects. An object packages both data and the procedures that operate on that data. The procedures are typically called methods or operations.")])]),t._v(" "),a("p",[t._v("面向对象的程序由对象组成。一个 "),a("em",[a("strong",[t._v("对象")])]),t._v(" 包含数据和对数据的操作。对数据的这些操作被称为 "),a("em",[a("strong",[t._v("方法")])]),t._v(" 。")])]),t._v(" "),a("p",[t._v("根据这个定义，rust 是面向对象的：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("struct")]),t._v(" 和 "),a("code",[t._v("enum")]),t._v(" 包含了数据")]),t._v(" "),a("li",[a("code",[t._v("impl")]),t._v(" 提供了方法")]),t._v(" "),a("li",[t._v("虽然带有方法的 "),a("code",[t._v("struct")]),t._v(" 和 "),a("code",[t._v("enum")]),t._v(" 在 rust 中不被称为 "),a("em",[a("strong",[t._v("对象")])]),t._v(" ，但提供了与 "),a("em",[a("strong",[t._v("对象")])]),t._v(" 相同的功能")])]),t._v(" "),a("h2",{attrs:{id:"封装"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#封装"}},[t._v("#")]),t._v(" 封装")]),t._v(" "),a("p",[t._v("封装的思想：")]),t._v(" "),a("ul",[a("li",[a("em",[a("strong",[t._v("对象的实现细节")])]),t._v(" 不能被 "),a("em",[a("strong",[t._v("对象的使用者")])]),t._v(" 获取到")]),t._v(" "),a("li",[t._v("所以，唯一与对象交互的方式是：对象提供的公有 API")]),t._v(" "),a("li",[t._v("对象的使用者无法深入到对象内部，从而无法直接改变对象的数据和行为")]),t._v(" "),a("li",[t._v("因此，封装的优点是：重构对象内部时，不需要重构对象使用者")])]),t._v(" "),a("p",[t._v("rust 的封装：")]),t._v(" "),a("ul",[a("li",[t._v("使用 "),a("code",[t._v("pub")]),t._v(" 来决定哪些 module、type、function、method 是公有的")]),t._v(" "),a("li",[t._v("而默认情况下，其它一切都是私有的")])]),t._v(" "),a("p",[t._v("下面看一个例子：")]),t._v(" "),a("div",{staticClass:"language-rust line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-rust"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 该 struct 是 pub")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 但 struct 中的数据是私有的")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("pub")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" AvgCollection "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 私有 - 用 Vec 来存储 i32")]),t._v("\n\tlist"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Vec"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("i32"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 私有 - Vec 中所有 i32 的平均值")]),t._v("\n\tavg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" f64"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 为 struct 提供操作")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("impl")]),t._v(" AvgCollection "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 公有 - 增加一个 i32数据")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("pub")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("mut")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" val"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" i32"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 在 Vec 中增加该 i32 数据")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("list"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("push")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("val"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 自动计算出最新的平均值")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("cal_avg")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 公有 - 通过该公有 API ，获得平均值")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("pub")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("avg")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("->")]),t._v(" f64 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("avg\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 私有 - 只有该 struct 内部可以计算平均值")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("fn")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("cal_avg")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("mut")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" total"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" i32 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("list"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("iter")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sum")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 私有数据 avg 只有该 struct 内部才能修改")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("avg "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("  total "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" f64 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("self")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("list"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("len")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" f64"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br"),a("span",{staticClass:"line-number"},[t._v("21")]),a("br"),a("span",{staticClass:"line-number"},[t._v("22")]),a("br"),a("span",{staticClass:"line-number"},[t._v("23")]),a("br"),a("span",{staticClass:"line-number"},[t._v("24")]),a("br"),a("span",{staticClass:"line-number"},[t._v("25")]),a("br"),a("span",{staticClass:"line-number"},[t._v("26")]),a("br"),a("span",{staticClass:"line-number"},[t._v("27")]),a("br"),a("span",{staticClass:"line-number"},[t._v("28")]),a("br"),a("span",{staticClass:"line-number"},[t._v("29")]),a("br"),a("span",{staticClass:"line-number"},[t._v("30")]),a("br"),a("span",{staticClass:"line-number"},[t._v("31")]),a("br")])]),a("p",[t._v("代码剖析：")]),t._v(" "),a("ul",[a("li",[t._v("提供了公有的 struct ，即 "),a("code",[t._v("AvgCollection")])]),t._v(" "),a("li",[t._v("在 "),a("code",[t._v("AvgCollection")]),t._v(" 中，数据成员都是私有的")]),t._v(" "),a("li",[t._v("而与 "),a("code",[t._v("AvgCollection")]),t._v(" 交互的唯一方式，是 "),a("code",[t._v("add（）")]),t._v(" 、"),a("code",[t._v("avg（）")]),t._v(" 这几个公有 API")]),t._v(" "),a("li",[t._v("也就是说，通过这些公有 API，可以增加 "),a("code",[t._v("i32")]),t._v(" 数据，并获取最新的平均值，且内部自动确保平均值是最新的")]),t._v(" "),a("li",[t._v("而对于使用者来说，无法直接修改 "),a("code",[t._v("list")]),t._v(" 、 "),a("code",[t._v("avg")]),t._v(" 这些内部数据，因为这可能导致 "),a("code",[t._v("list")]),t._v(" 与 "),a("code",[t._v("avg")]),t._v(" 的值不同步")]),t._v(" "),a("li",[t._v("另外，一旦 "),a("code",[t._v("add（）")]),t._v(" 、"),a("code",[t._v("avg（）")]),t._v(" 这些公有 API 的签名确定之后，我们就可以修改该 struct 的内部细节，例如将 "),a("code",[t._v("Vec<i32>")]),t._v(" 修改为 "),a("code",[t._v("HashSet<i32>")]),t._v(" ，但这不会影响到该 struct 的使用者")])]),t._v(" "),a("h2",{attrs:{id:"继承"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#继承"}},[t._v("#")]),t._v(" 继承")]),t._v(" "),a("p",[t._v("关于继承：")]),t._v(" "),a("ul",[a("li",[t._v("继承的机制是：一个对象（子类型）可以继承另一个对象（父类型），从而子类型可以直接获得父类型的数据和行为")]),t._v(" "),a("li",[t._v("继承的目的之一，是为了重用代码：子类型可以重用父类型的数据和行为；但继承的缺点是："),a("em",[a("strong",[t._v("为了重用代码，从而引入了更多的代码")])]),t._v("（这一点应该很好理解）")]),t._v(" "),a("li",[t._v("继承的目的之二，是为了实现 "),a("em",[a("strong",[t._v("多态")])])])]),t._v(" "),a("p",[t._v("rust 的继承：")]),t._v(" "),a("ul",[a("li",[t._v("rust 使用了与其它面向对象编程语言所不同的继承方案，针对这一点，可以说 rust 不是面向对象的，但这样的讨论没有意义")]),t._v(" "),a("li",[t._v("第一方面，重用代码：\n"),a("ul",[a("li",[t._v("rust 提供了 trait 机制")]),t._v(" "),a("li",[t._v("而 trait 的方法可以有默认的实现，例如 Chapter10 中就有这样的例子")]),t._v(" "),a("li",[t._v("所以，如果某个类型实现了该 trait，且该 trait 的方法有默认实现，则该类型可以不再实现该方法")]),t._v(" "),a("li",[t._v("相反，该类型也可以重新实现该 trait 的方法，这类似于子类型覆盖了父类型的方法")])])]),t._v(" "),a("li",[t._v("第二方面，实现多态：\n"),a("ul",[a("li",[t._v("rust 通过 "),a("em",[a("strong",[t._v("泛型")])]),t._v(" 来对不同的类型进行抽象")]),t._v(" "),a("li",[t._v("然后通过 "),a("em",[a("strong",[t._v("Trait")])]),t._v(" 来约束这些类型的功能")]),t._v(" "),a("li",[t._v("这被称为 "),a("em",[a("strong",[t._v("参数多态")])]),t._v("（"),a("em",[a("strong",[t._v("bounded parametric polymorphism")])]),t._v("）")])])])])])}),[],!1,null,null,null);s.default=e.exports}}]);